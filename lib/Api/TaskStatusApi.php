<?php
/**
 * TaskStatusApi
 * PHP version 7.4
 *
 * @category Class
 * @package  IvkeyMinds\InvoiceNinjaClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Invoice Ninja
 *
 * Invoice Ninja. Open Source Invoicing lives here.
 *
 * The version of the OpenAPI document: 5.5.58
 * Contact: contact@invoiceninja.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace IvkeyMinds\InvoiceNinjaClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use IvkeyMinds\InvoiceNinjaClient\ApiException;
use IvkeyMinds\InvoiceNinjaClient\Configuration;
use IvkeyMinds\InvoiceNinjaClient\HeaderSelector;
use IvkeyMinds\InvoiceNinjaClient\ObjectSerializer;

/**
 * TaskStatusApi Class Doc Comment
 *
 * @category Class
 * @package  IvkeyMinds\InvoiceNinjaClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TaskStatusApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'bulkTaskStatuss' => [
            'application/json',
        ],
        'editTaskStatuss' => [
            'application/json',
        ],
        'getTaskStatuses' => [
            'application/json',
        ],
        'getTaskStatussCreate' => [
            'application/json',
        ],
        'showTaskStatus' => [
            'application/json',
        ],
        'storeTaskStatus' => [
            'application/json',
        ],
        'updateTaskStatus' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation bulkTaskStatuss
     *
     * Performs bulk actions on an array of task statuses
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  int[] $request_body TaskStatus Ter,s (required)
     * @param  string $index Replaces the default response index from data to a user specific string (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkTaskStatuss'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus|\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError|\IvkeyMinds\InvoiceNinjaClient\Model\Error
     */
    public function bulkTaskStatuss($x_api_token, $x_requested_with, $request_body, $index = null, string $contentType = self::contentTypes['bulkTaskStatuss'][0])
    {
        list($response) = $this->bulkTaskStatussWithHttpInfo($x_api_token, $x_requested_with, $request_body, $index, $contentType);
        return $response;
    }

    /**
     * Operation bulkTaskStatussWithHttpInfo
     *
     * Performs bulk actions on an array of task statuses
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  int[] $request_body TaskStatus Ter,s (required)
     * @param  string $index Replaces the default response index from data to a user specific string (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkTaskStatuss'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus|\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError|\IvkeyMinds\InvoiceNinjaClient\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkTaskStatussWithHttpInfo($x_api_token, $x_requested_with, $request_body, $index = null, string $contentType = self::contentTypes['bulkTaskStatuss'][0])
    {
        $request = $this->bulkTaskStatussRequest($x_api_token, $x_requested_with, $request_body, $index, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512);
                    } catch (\Exception $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bulkTaskStatussAsync
     *
     * Performs bulk actions on an array of task statuses
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  int[] $request_body TaskStatus Ter,s (required)
     * @param  string $index Replaces the default response index from data to a user specific string (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkTaskStatuss'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkTaskStatussAsync($x_api_token, $x_requested_with, $request_body, $index = null, string $contentType = self::contentTypes['bulkTaskStatuss'][0])
    {
        return $this->bulkTaskStatussAsyncWithHttpInfo($x_api_token, $x_requested_with, $request_body, $index, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bulkTaskStatussAsyncWithHttpInfo
     *
     * Performs bulk actions on an array of task statuses
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  int[] $request_body TaskStatus Ter,s (required)
     * @param  string $index Replaces the default response index from data to a user specific string (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkTaskStatuss'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkTaskStatussAsyncWithHttpInfo($x_api_token, $x_requested_with, $request_body, $index = null, string $contentType = self::contentTypes['bulkTaskStatuss'][0])
    {
        $returnType = '\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus';
        $request = $this->bulkTaskStatussRequest($x_api_token, $x_requested_with, $request_body, $index, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkTaskStatuss'
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  int[] $request_body TaskStatus Ter,s (required)
     * @param  string $index Replaces the default response index from data to a user specific string (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkTaskStatuss'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkTaskStatussRequest($x_api_token, $x_requested_with, $request_body, $index = null, string $contentType = self::contentTypes['bulkTaskStatuss'][0])
    {

        // verify the required parameter 'x_api_token' is set
        if ($x_api_token === null || (is_array($x_api_token) && count($x_api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_token when calling bulkTaskStatuss'
            );
        }

        // verify the required parameter 'x_requested_with' is set
        if ($x_requested_with === null || (is_array($x_requested_with) && count($x_requested_with) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_requested_with when calling bulkTaskStatuss'
            );
        }

        // verify the required parameter 'request_body' is set
        if ($request_body === null || (is_array($request_body) && count($request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_body when calling bulkTaskStatuss'
            );
        }



        $resourcePath = '/api/v1/task_statuses/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $index,
            'index', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_api_token !== null) {
            $headerParams['X-Api-Token'] = ObjectSerializer::toHeaderValue($x_api_token);
        }
        // header params
        if ($x_requested_with !== null) {
            $headerParams['X-Requested-With'] = ObjectSerializer::toHeaderValue($x_requested_with);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation editTaskStatuss
     *
     * Shows an TaskStatusfor editting
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The TaskStatusHashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editTaskStatuss'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus|\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError|\IvkeyMinds\InvoiceNinjaClient\Model\Error
     */
    public function editTaskStatuss($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['editTaskStatuss'][0])
    {
        list($response) = $this->editTaskStatussWithHttpInfo($x_api_token, $x_requested_with, $id, $include, $contentType);
        return $response;
    }

    /**
     * Operation editTaskStatussWithHttpInfo
     *
     * Shows an TaskStatusfor editting
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The TaskStatusHashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editTaskStatuss'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus|\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError|\IvkeyMinds\InvoiceNinjaClient\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function editTaskStatussWithHttpInfo($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['editTaskStatuss'][0])
    {
        $request = $this->editTaskStatussRequest($x_api_token, $x_requested_with, $id, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512);
                    } catch (\Exception $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation editTaskStatussAsync
     *
     * Shows an TaskStatusfor editting
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The TaskStatusHashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editTaskStatuss'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editTaskStatussAsync($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['editTaskStatuss'][0])
    {
        return $this->editTaskStatussAsyncWithHttpInfo($x_api_token, $x_requested_with, $id, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation editTaskStatussAsyncWithHttpInfo
     *
     * Shows an TaskStatusfor editting
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The TaskStatusHashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editTaskStatuss'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editTaskStatussAsyncWithHttpInfo($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['editTaskStatuss'][0])
    {
        $returnType = '\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus';
        $request = $this->editTaskStatussRequest($x_api_token, $x_requested_with, $id, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'editTaskStatuss'
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The TaskStatusHashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editTaskStatuss'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function editTaskStatussRequest($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['editTaskStatuss'][0])
    {

        // verify the required parameter 'x_api_token' is set
        if ($x_api_token === null || (is_array($x_api_token) && count($x_api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_token when calling editTaskStatuss'
            );
        }

        // verify the required parameter 'x_requested_with' is set
        if ($x_requested_with === null || (is_array($x_requested_with) && count($x_requested_with) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_requested_with when calling editTaskStatuss'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling editTaskStatuss'
            );
        }



        $resourcePath = '/api/v1/task_statuses/{id}/edit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_api_token !== null) {
            $headerParams['X-Api-Token'] = ObjectSerializer::toHeaderValue($x_api_token);
        }
        // header params
        if ($x_requested_with !== null) {
            $headerParams['X-Requested-With'] = ObjectSerializer::toHeaderValue($x_requested_with);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTaskStatuses
     *
     * Gets a list of task statuses
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $index Replaces the default response index from data to a user specific string (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTaskStatuses'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus|\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError|\IvkeyMinds\InvoiceNinjaClient\Model\Error
     */
    public function getTaskStatuses($x_api_token, $x_requested_with, $include = null, $index = null, string $contentType = self::contentTypes['getTaskStatuses'][0])
    {
        list($response) = $this->getTaskStatusesWithHttpInfo($x_api_token, $x_requested_with, $include, $index, $contentType);
        return $response;
    }

    /**
     * Operation getTaskStatusesWithHttpInfo
     *
     * Gets a list of task statuses
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $index Replaces the default response index from data to a user specific string (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTaskStatuses'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus|\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError|\IvkeyMinds\InvoiceNinjaClient\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTaskStatusesWithHttpInfo($x_api_token, $x_requested_with, $include = null, $index = null, string $contentType = self::contentTypes['getTaskStatuses'][0])
    {
        $request = $this->getTaskStatusesRequest($x_api_token, $x_requested_with, $include, $index, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512);
                    } catch (\Exception $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTaskStatusesAsync
     *
     * Gets a list of task statuses
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $index Replaces the default response index from data to a user specific string (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTaskStatuses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTaskStatusesAsync($x_api_token, $x_requested_with, $include = null, $index = null, string $contentType = self::contentTypes['getTaskStatuses'][0])
    {
        return $this->getTaskStatusesAsyncWithHttpInfo($x_api_token, $x_requested_with, $include, $index, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTaskStatusesAsyncWithHttpInfo
     *
     * Gets a list of task statuses
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $index Replaces the default response index from data to a user specific string (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTaskStatuses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTaskStatusesAsyncWithHttpInfo($x_api_token, $x_requested_with, $include = null, $index = null, string $contentType = self::contentTypes['getTaskStatuses'][0])
    {
        $returnType = '\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus';
        $request = $this->getTaskStatusesRequest($x_api_token, $x_requested_with, $include, $index, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTaskStatuses'
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $index Replaces the default response index from data to a user specific string (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTaskStatuses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTaskStatusesRequest($x_api_token, $x_requested_with, $include = null, $index = null, string $contentType = self::contentTypes['getTaskStatuses'][0])
    {

        // verify the required parameter 'x_api_token' is set
        if ($x_api_token === null || (is_array($x_api_token) && count($x_api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_token when calling getTaskStatuses'
            );
        }

        // verify the required parameter 'x_requested_with' is set
        if ($x_requested_with === null || (is_array($x_requested_with) && count($x_requested_with) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_requested_with when calling getTaskStatuses'
            );
        }




        $resourcePath = '/api/v1/task_statuses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $index,
            'index', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_api_token !== null) {
            $headerParams['X-Api-Token'] = ObjectSerializer::toHeaderValue($x_api_token);
        }
        // header params
        if ($x_requested_with !== null) {
            $headerParams['X-Requested-With'] = ObjectSerializer::toHeaderValue($x_requested_with);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTaskStatussCreate
     *
     * Gets a new blank TaskStatus object
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTaskStatussCreate'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus|\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError|\IvkeyMinds\InvoiceNinjaClient\Model\Error
     */
    public function getTaskStatussCreate($x_api_token, $x_requested_with, $include = null, string $contentType = self::contentTypes['getTaskStatussCreate'][0])
    {
        list($response) = $this->getTaskStatussCreateWithHttpInfo($x_api_token, $x_requested_with, $include, $contentType);
        return $response;
    }

    /**
     * Operation getTaskStatussCreateWithHttpInfo
     *
     * Gets a new blank TaskStatus object
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTaskStatussCreate'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus|\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError|\IvkeyMinds\InvoiceNinjaClient\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTaskStatussCreateWithHttpInfo($x_api_token, $x_requested_with, $include = null, string $contentType = self::contentTypes['getTaskStatussCreate'][0])
    {
        $request = $this->getTaskStatussCreateRequest($x_api_token, $x_requested_with, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512);
                    } catch (\Exception $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTaskStatussCreateAsync
     *
     * Gets a new blank TaskStatus object
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTaskStatussCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTaskStatussCreateAsync($x_api_token, $x_requested_with, $include = null, string $contentType = self::contentTypes['getTaskStatussCreate'][0])
    {
        return $this->getTaskStatussCreateAsyncWithHttpInfo($x_api_token, $x_requested_with, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTaskStatussCreateAsyncWithHttpInfo
     *
     * Gets a new blank TaskStatus object
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTaskStatussCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTaskStatussCreateAsyncWithHttpInfo($x_api_token, $x_requested_with, $include = null, string $contentType = self::contentTypes['getTaskStatussCreate'][0])
    {
        $returnType = '\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus';
        $request = $this->getTaskStatussCreateRequest($x_api_token, $x_requested_with, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTaskStatussCreate'
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTaskStatussCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTaskStatussCreateRequest($x_api_token, $x_requested_with, $include = null, string $contentType = self::contentTypes['getTaskStatussCreate'][0])
    {

        // verify the required parameter 'x_api_token' is set
        if ($x_api_token === null || (is_array($x_api_token) && count($x_api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_token when calling getTaskStatussCreate'
            );
        }

        // verify the required parameter 'x_requested_with' is set
        if ($x_requested_with === null || (is_array($x_requested_with) && count($x_requested_with) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_requested_with when calling getTaskStatussCreate'
            );
        }



        $resourcePath = '/api/v1/task_statuses/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_api_token !== null) {
            $headerParams['X-Api-Token'] = ObjectSerializer::toHeaderValue($x_api_token);
        }
        // header params
        if ($x_requested_with !== null) {
            $headerParams['X-Requested-With'] = ObjectSerializer::toHeaderValue($x_requested_with);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation showTaskStatus
     *
     * Shows a TaskStatus Term
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The TaskStatusHashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['showTaskStatus'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus|\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError|\IvkeyMinds\InvoiceNinjaClient\Model\Error
     */
    public function showTaskStatus($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['showTaskStatus'][0])
    {
        list($response) = $this->showTaskStatusWithHttpInfo($x_api_token, $x_requested_with, $id, $include, $contentType);
        return $response;
    }

    /**
     * Operation showTaskStatusWithHttpInfo
     *
     * Shows a TaskStatus Term
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The TaskStatusHashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['showTaskStatus'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus|\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError|\IvkeyMinds\InvoiceNinjaClient\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function showTaskStatusWithHttpInfo($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['showTaskStatus'][0])
    {
        $request = $this->showTaskStatusRequest($x_api_token, $x_requested_with, $id, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512);
                    } catch (\Exception $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation showTaskStatusAsync
     *
     * Shows a TaskStatus Term
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The TaskStatusHashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['showTaskStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showTaskStatusAsync($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['showTaskStatus'][0])
    {
        return $this->showTaskStatusAsyncWithHttpInfo($x_api_token, $x_requested_with, $id, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation showTaskStatusAsyncWithHttpInfo
     *
     * Shows a TaskStatus Term
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The TaskStatusHashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['showTaskStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showTaskStatusAsyncWithHttpInfo($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['showTaskStatus'][0])
    {
        $returnType = '\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus';
        $request = $this->showTaskStatusRequest($x_api_token, $x_requested_with, $id, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'showTaskStatus'
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The TaskStatusHashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['showTaskStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function showTaskStatusRequest($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['showTaskStatus'][0])
    {

        // verify the required parameter 'x_api_token' is set
        if ($x_api_token === null || (is_array($x_api_token) && count($x_api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_token when calling showTaskStatus'
            );
        }

        // verify the required parameter 'x_requested_with' is set
        if ($x_requested_with === null || (is_array($x_requested_with) && count($x_requested_with) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_requested_with when calling showTaskStatus'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling showTaskStatus'
            );
        }



        $resourcePath = '/api/v1/task_statuses/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_api_token !== null) {
            $headerParams['X-Api-Token'] = ObjectSerializer::toHeaderValue($x_api_token);
        }
        // header params
        if ($x_requested_with !== null) {
            $headerParams['X-Requested-With'] = ObjectSerializer::toHeaderValue($x_requested_with);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation storeTaskStatus
     *
     * Adds a TaskStatus
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus $task_status The task_status request (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storeTaskStatus'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus|\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError|\IvkeyMinds\InvoiceNinjaClient\Model\Error
     */
    public function storeTaskStatus($x_api_token, $x_requested_with, $task_status, $include = null, string $contentType = self::contentTypes['storeTaskStatus'][0])
    {
        list($response) = $this->storeTaskStatusWithHttpInfo($x_api_token, $x_requested_with, $task_status, $include, $contentType);
        return $response;
    }

    /**
     * Operation storeTaskStatusWithHttpInfo
     *
     * Adds a TaskStatus
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus $task_status The task_status request (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storeTaskStatus'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus|\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError|\IvkeyMinds\InvoiceNinjaClient\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function storeTaskStatusWithHttpInfo($x_api_token, $x_requested_with, $task_status, $include = null, string $contentType = self::contentTypes['storeTaskStatus'][0])
    {
        $request = $this->storeTaskStatusRequest($x_api_token, $x_requested_with, $task_status, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512);
                    } catch (\Exception $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation storeTaskStatusAsync
     *
     * Adds a TaskStatus
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus $task_status The task_status request (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storeTaskStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storeTaskStatusAsync($x_api_token, $x_requested_with, $task_status, $include = null, string $contentType = self::contentTypes['storeTaskStatus'][0])
    {
        return $this->storeTaskStatusAsyncWithHttpInfo($x_api_token, $x_requested_with, $task_status, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storeTaskStatusAsyncWithHttpInfo
     *
     * Adds a TaskStatus
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus $task_status The task_status request (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storeTaskStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storeTaskStatusAsyncWithHttpInfo($x_api_token, $x_requested_with, $task_status, $include = null, string $contentType = self::contentTypes['storeTaskStatus'][0])
    {
        $returnType = '\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus';
        $request = $this->storeTaskStatusRequest($x_api_token, $x_requested_with, $task_status, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'storeTaskStatus'
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus $task_status The task_status request (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storeTaskStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function storeTaskStatusRequest($x_api_token, $x_requested_with, $task_status, $include = null, string $contentType = self::contentTypes['storeTaskStatus'][0])
    {

        // verify the required parameter 'x_api_token' is set
        if ($x_api_token === null || (is_array($x_api_token) && count($x_api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_token when calling storeTaskStatus'
            );
        }

        // verify the required parameter 'x_requested_with' is set
        if ($x_requested_with === null || (is_array($x_requested_with) && count($x_requested_with) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_requested_with when calling storeTaskStatus'
            );
        }

        // verify the required parameter 'task_status' is set
        if ($task_status === null || (is_array($task_status) && count($task_status) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_status when calling storeTaskStatus'
            );
        }



        $resourcePath = '/api/v1/task_statuses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_api_token !== null) {
            $headerParams['X-Api-Token'] = ObjectSerializer::toHeaderValue($x_api_token);
        }
        // header params
        if ($x_requested_with !== null) {
            $headerParams['X-Requested-With'] = ObjectSerializer::toHeaderValue($x_requested_with);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($task_status)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($task_status));
            } else {
                $httpBody = $task_status;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTaskStatus
     *
     * Updates a TaskStatus Term
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The TaskStatusHashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTaskStatus'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus|\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError|\IvkeyMinds\InvoiceNinjaClient\Model\Error
     */
    public function updateTaskStatus($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['updateTaskStatus'][0])
    {
        list($response) = $this->updateTaskStatusWithHttpInfo($x_api_token, $x_requested_with, $id, $include, $contentType);
        return $response;
    }

    /**
     * Operation updateTaskStatusWithHttpInfo
     *
     * Updates a TaskStatus Term
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The TaskStatusHashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTaskStatus'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus|\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError|\IvkeyMinds\InvoiceNinjaClient\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTaskStatusWithHttpInfo($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['updateTaskStatus'][0])
    {
        $request = $this->updateTaskStatusRequest($x_api_token, $x_requested_with, $id, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512);
                    } catch (\Exception $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateTaskStatusAsync
     *
     * Updates a TaskStatus Term
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The TaskStatusHashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTaskStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTaskStatusAsync($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['updateTaskStatus'][0])
    {
        return $this->updateTaskStatusAsyncWithHttpInfo($x_api_token, $x_requested_with, $id, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTaskStatusAsyncWithHttpInfo
     *
     * Updates a TaskStatus Term
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The TaskStatusHashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTaskStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTaskStatusAsyncWithHttpInfo($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['updateTaskStatus'][0])
    {
        $returnType = '\IvkeyMinds\InvoiceNinjaClient\Model\TaskStatus';
        $request = $this->updateTaskStatusRequest($x_api_token, $x_requested_with, $id, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTaskStatus'
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The TaskStatusHashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTaskStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateTaskStatusRequest($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['updateTaskStatus'][0])
    {

        // verify the required parameter 'x_api_token' is set
        if ($x_api_token === null || (is_array($x_api_token) && count($x_api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_token when calling updateTaskStatus'
            );
        }

        // verify the required parameter 'x_requested_with' is set
        if ($x_requested_with === null || (is_array($x_requested_with) && count($x_requested_with) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_requested_with when calling updateTaskStatus'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateTaskStatus'
            );
        }



        $resourcePath = '/api/v1/task_statuses/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_api_token !== null) {
            $headerParams['X-Api-Token'] = ObjectSerializer::toHeaderValue($x_api_token);
        }
        // header params
        if ($x_requested_with !== null) {
            $headerParams['X-Requested-With'] = ObjectSerializer::toHeaderValue($x_requested_with);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
