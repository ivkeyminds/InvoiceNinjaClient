<?php
/**
 * PaymentsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  IvkeyMinds\InvoiceNinjaClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Invoice Ninja
 *
 * Invoice Ninja. Open Source Invoicing lives here.
 *
 * The version of the OpenAPI document: 5.5.58
 * Contact: contact@invoiceninja.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace IvkeyMinds\InvoiceNinjaClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use IvkeyMinds\InvoiceNinjaClient\ApiException;
use IvkeyMinds\InvoiceNinjaClient\Configuration;
use IvkeyMinds\InvoiceNinjaClient\HeaderSelector;
use IvkeyMinds\InvoiceNinjaClient\ObjectSerializer;

/**
 * PaymentsApi Class Doc Comment
 *
 * @category Class
 * @package  IvkeyMinds\InvoiceNinjaClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PaymentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'actionPayment' => [
            'application/json',
        ],
        'bulkPayments' => [
            'application/json',
        ],
        'deletePayment' => [
            'application/json',
        ],
        'editPayment' => [
            'application/json',
        ],
        'getPayments' => [
            'application/json',
        ],
        'getPaymentsCreate' => [
            'application/json',
        ],
        'showPayment' => [
            'application/json',
        ],
        'storePayment' => [
            'application/json',
        ],
        'storeRefund' => [
            'application/json',
        ],
        'updatePayment' => [
            'application/json',
        ],
        'uploadPayment' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation actionPayment
     *
     * Performs a custom action on an Payment
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The Payment Hashed ID (required)
     * @param  string $action The action string to be performed (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['actionPayment'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \IvkeyMinds\InvoiceNinjaClient\Model\Payment|\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError|\IvkeyMinds\InvoiceNinjaClient\Model\Error
     */
    public function actionPayment($x_api_token, $x_requested_with, $id, $action, $include = null, string $contentType = self::contentTypes['actionPayment'][0])
    {
        list($response) = $this->actionPaymentWithHttpInfo($x_api_token, $x_requested_with, $id, $action, $include, $contentType);
        return $response;
    }

    /**
     * Operation actionPaymentWithHttpInfo
     *
     * Performs a custom action on an Payment
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The Payment Hashed ID (required)
     * @param  string $action The action string to be performed (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['actionPayment'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \IvkeyMinds\InvoiceNinjaClient\Model\Payment|\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError|\IvkeyMinds\InvoiceNinjaClient\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function actionPaymentWithHttpInfo($x_api_token, $x_requested_with, $id, $action, $include = null, string $contentType = self::contentTypes['actionPayment'][0])
    {
        $request = $this->actionPaymentRequest($x_api_token, $x_requested_with, $id, $action, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\Payment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\Payment' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\Payment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\IvkeyMinds\InvoiceNinjaClient\Model\Payment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512);
                    } catch (\Exception $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation actionPaymentAsync
     *
     * Performs a custom action on an Payment
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The Payment Hashed ID (required)
     * @param  string $action The action string to be performed (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['actionPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function actionPaymentAsync($x_api_token, $x_requested_with, $id, $action, $include = null, string $contentType = self::contentTypes['actionPayment'][0])
    {
        return $this->actionPaymentAsyncWithHttpInfo($x_api_token, $x_requested_with, $id, $action, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation actionPaymentAsyncWithHttpInfo
     *
     * Performs a custom action on an Payment
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The Payment Hashed ID (required)
     * @param  string $action The action string to be performed (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['actionPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function actionPaymentAsyncWithHttpInfo($x_api_token, $x_requested_with, $id, $action, $include = null, string $contentType = self::contentTypes['actionPayment'][0])
    {
        $returnType = '\IvkeyMinds\InvoiceNinjaClient\Model\Payment';
        $request = $this->actionPaymentRequest($x_api_token, $x_requested_with, $id, $action, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'actionPayment'
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The Payment Hashed ID (required)
     * @param  string $action The action string to be performed (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['actionPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function actionPaymentRequest($x_api_token, $x_requested_with, $id, $action, $include = null, string $contentType = self::contentTypes['actionPayment'][0])
    {

        // verify the required parameter 'x_api_token' is set
        if ($x_api_token === null || (is_array($x_api_token) && count($x_api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_token when calling actionPayment'
            );
        }

        // verify the required parameter 'x_requested_with' is set
        if ($x_requested_with === null || (is_array($x_requested_with) && count($x_requested_with) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_requested_with when calling actionPayment'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling actionPayment'
            );
        }

        // verify the required parameter 'action' is set
        if ($action === null || (is_array($action) && count($action) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $action when calling actionPayment'
            );
        }



        $resourcePath = '/api/v1/payments/{id}/{action}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_api_token !== null) {
            $headerParams['X-Api-Token'] = ObjectSerializer::toHeaderValue($x_api_token);
        }
        // header params
        if ($x_requested_with !== null) {
            $headerParams['X-Requested-With'] = ObjectSerializer::toHeaderValue($x_requested_with);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($action !== null) {
            $resourcePath = str_replace(
                '{' . 'action' . '}',
                ObjectSerializer::toPathValue($action),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \IvkeyMinds\InvoiceNinjaClient\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkPayments
     *
     * Performs bulk actions on an array of payments
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  int[] $request_body User credentials (required)
     * @param  string $index Replaces the default response index from data to a user specific string (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkPayments'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \IvkeyMinds\InvoiceNinjaClient\Model\Payment|\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError|\IvkeyMinds\InvoiceNinjaClient\Model\Error
     */
    public function bulkPayments($x_api_token, $x_requested_with, $request_body, $index = null, string $contentType = self::contentTypes['bulkPayments'][0])
    {
        list($response) = $this->bulkPaymentsWithHttpInfo($x_api_token, $x_requested_with, $request_body, $index, $contentType);
        return $response;
    }

    /**
     * Operation bulkPaymentsWithHttpInfo
     *
     * Performs bulk actions on an array of payments
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  int[] $request_body User credentials (required)
     * @param  string $index Replaces the default response index from data to a user specific string (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkPayments'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \IvkeyMinds\InvoiceNinjaClient\Model\Payment|\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError|\IvkeyMinds\InvoiceNinjaClient\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkPaymentsWithHttpInfo($x_api_token, $x_requested_with, $request_body, $index = null, string $contentType = self::contentTypes['bulkPayments'][0])
    {
        $request = $this->bulkPaymentsRequest($x_api_token, $x_requested_with, $request_body, $index, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\Payment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\Payment' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\Payment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\IvkeyMinds\InvoiceNinjaClient\Model\Payment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512);
                    } catch (\Exception $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bulkPaymentsAsync
     *
     * Performs bulk actions on an array of payments
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  int[] $request_body User credentials (required)
     * @param  string $index Replaces the default response index from data to a user specific string (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkPayments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkPaymentsAsync($x_api_token, $x_requested_with, $request_body, $index = null, string $contentType = self::contentTypes['bulkPayments'][0])
    {
        return $this->bulkPaymentsAsyncWithHttpInfo($x_api_token, $x_requested_with, $request_body, $index, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bulkPaymentsAsyncWithHttpInfo
     *
     * Performs bulk actions on an array of payments
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  int[] $request_body User credentials (required)
     * @param  string $index Replaces the default response index from data to a user specific string (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkPayments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkPaymentsAsyncWithHttpInfo($x_api_token, $x_requested_with, $request_body, $index = null, string $contentType = self::contentTypes['bulkPayments'][0])
    {
        $returnType = '\IvkeyMinds\InvoiceNinjaClient\Model\Payment';
        $request = $this->bulkPaymentsRequest($x_api_token, $x_requested_with, $request_body, $index, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkPayments'
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  int[] $request_body User credentials (required)
     * @param  string $index Replaces the default response index from data to a user specific string (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkPayments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkPaymentsRequest($x_api_token, $x_requested_with, $request_body, $index = null, string $contentType = self::contentTypes['bulkPayments'][0])
    {

        // verify the required parameter 'x_api_token' is set
        if ($x_api_token === null || (is_array($x_api_token) && count($x_api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_token when calling bulkPayments'
            );
        }

        // verify the required parameter 'x_requested_with' is set
        if ($x_requested_with === null || (is_array($x_requested_with) && count($x_requested_with) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_requested_with when calling bulkPayments'
            );
        }

        // verify the required parameter 'request_body' is set
        if ($request_body === null || (is_array($request_body) && count($request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_body when calling bulkPayments'
            );
        }



        $resourcePath = '/api/v1/payments/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $index,
            'index', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_api_token !== null) {
            $headerParams['X-Api-Token'] = ObjectSerializer::toHeaderValue($x_api_token);
        }
        // header params
        if ($x_requested_with !== null) {
            $headerParams['X-Requested-With'] = ObjectSerializer::toHeaderValue($x_requested_with);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \IvkeyMinds\InvoiceNinjaClient\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \IvkeyMinds\InvoiceNinjaClient\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePayment
     *
     * Deletes a Payment
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The Payment Hashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayment'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deletePayment($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['deletePayment'][0])
    {
        $this->deletePaymentWithHttpInfo($x_api_token, $x_requested_with, $id, $include, $contentType);
    }

    /**
     * Operation deletePaymentWithHttpInfo
     *
     * Deletes a Payment
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The Payment Hashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayment'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePaymentWithHttpInfo($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['deletePayment'][0])
    {
        $request = $this->deletePaymentRequest($x_api_token, $x_requested_with, $id, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deletePaymentAsync
     *
     * Deletes a Payment
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The Payment Hashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePaymentAsync($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['deletePayment'][0])
    {
        return $this->deletePaymentAsyncWithHttpInfo($x_api_token, $x_requested_with, $id, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePaymentAsyncWithHttpInfo
     *
     * Deletes a Payment
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The Payment Hashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePaymentAsyncWithHttpInfo($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['deletePayment'][0])
    {
        $returnType = '';
        $request = $this->deletePaymentRequest($x_api_token, $x_requested_with, $id, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePayment'
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The Payment Hashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletePaymentRequest($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['deletePayment'][0])
    {

        // verify the required parameter 'x_api_token' is set
        if ($x_api_token === null || (is_array($x_api_token) && count($x_api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_token when calling deletePayment'
            );
        }

        // verify the required parameter 'x_requested_with' is set
        if ($x_requested_with === null || (is_array($x_requested_with) && count($x_requested_with) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_requested_with when calling deletePayment'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deletePayment'
            );
        }



        $resourcePath = '/api/v1/payments/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_api_token !== null) {
            $headerParams['X-Api-Token'] = ObjectSerializer::toHeaderValue($x_api_token);
        }
        // header params
        if ($x_requested_with !== null) {
            $headerParams['X-Requested-With'] = ObjectSerializer::toHeaderValue($x_requested_with);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \IvkeyMinds\InvoiceNinjaClient\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation editPayment
     *
     * Shows an Payment for editting
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The Payment Hashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editPayment'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \IvkeyMinds\InvoiceNinjaClient\Model\Payment|\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError|\IvkeyMinds\InvoiceNinjaClient\Model\Error
     */
    public function editPayment($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['editPayment'][0])
    {
        list($response) = $this->editPaymentWithHttpInfo($x_api_token, $x_requested_with, $id, $include, $contentType);
        return $response;
    }

    /**
     * Operation editPaymentWithHttpInfo
     *
     * Shows an Payment for editting
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The Payment Hashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editPayment'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \IvkeyMinds\InvoiceNinjaClient\Model\Payment|\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError|\IvkeyMinds\InvoiceNinjaClient\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function editPaymentWithHttpInfo($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['editPayment'][0])
    {
        $request = $this->editPaymentRequest($x_api_token, $x_requested_with, $id, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\Payment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\Payment' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\Payment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\IvkeyMinds\InvoiceNinjaClient\Model\Payment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512);
                    } catch (\Exception $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation editPaymentAsync
     *
     * Shows an Payment for editting
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The Payment Hashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editPaymentAsync($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['editPayment'][0])
    {
        return $this->editPaymentAsyncWithHttpInfo($x_api_token, $x_requested_with, $id, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation editPaymentAsyncWithHttpInfo
     *
     * Shows an Payment for editting
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The Payment Hashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editPaymentAsyncWithHttpInfo($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['editPayment'][0])
    {
        $returnType = '\IvkeyMinds\InvoiceNinjaClient\Model\Payment';
        $request = $this->editPaymentRequest($x_api_token, $x_requested_with, $id, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'editPayment'
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The Payment Hashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function editPaymentRequest($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['editPayment'][0])
    {

        // verify the required parameter 'x_api_token' is set
        if ($x_api_token === null || (is_array($x_api_token) && count($x_api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_token when calling editPayment'
            );
        }

        // verify the required parameter 'x_requested_with' is set
        if ($x_requested_with === null || (is_array($x_requested_with) && count($x_requested_with) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_requested_with when calling editPayment'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling editPayment'
            );
        }



        $resourcePath = '/api/v1/payments/{id}/edit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_api_token !== null) {
            $headerParams['X-Api-Token'] = ObjectSerializer::toHeaderValue($x_api_token);
        }
        // header params
        if ($x_requested_with !== null) {
            $headerParams['X-Requested-With'] = ObjectSerializer::toHeaderValue($x_requested_with);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \IvkeyMinds\InvoiceNinjaClient\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPayments
     *
     * Gets a list of payments
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayments'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \IvkeyMinds\InvoiceNinjaClient\Model\Payment|\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError|\IvkeyMinds\InvoiceNinjaClient\Model\Error
     */
    public function getPayments($x_api_token, $x_requested_with, $include = null, string $contentType = self::contentTypes['getPayments'][0])
    {
        list($response) = $this->getPaymentsWithHttpInfo($x_api_token, $x_requested_with, $include, $contentType);
        return $response;
    }

    /**
     * Operation getPaymentsWithHttpInfo
     *
     * Gets a list of payments
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayments'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \IvkeyMinds\InvoiceNinjaClient\Model\Payment|\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError|\IvkeyMinds\InvoiceNinjaClient\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentsWithHttpInfo($x_api_token, $x_requested_with, $include = null, string $contentType = self::contentTypes['getPayments'][0])
    {
        $request = $this->getPaymentsRequest($x_api_token, $x_requested_with, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\Payment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\Payment' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\Payment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\IvkeyMinds\InvoiceNinjaClient\Model\Payment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512);
                    } catch (\Exception $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaymentsAsync
     *
     * Gets a list of payments
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentsAsync($x_api_token, $x_requested_with, $include = null, string $contentType = self::contentTypes['getPayments'][0])
    {
        return $this->getPaymentsAsyncWithHttpInfo($x_api_token, $x_requested_with, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentsAsyncWithHttpInfo
     *
     * Gets a list of payments
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentsAsyncWithHttpInfo($x_api_token, $x_requested_with, $include = null, string $contentType = self::contentTypes['getPayments'][0])
    {
        $returnType = '\IvkeyMinds\InvoiceNinjaClient\Model\Payment';
        $request = $this->getPaymentsRequest($x_api_token, $x_requested_with, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPayments'
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPaymentsRequest($x_api_token, $x_requested_with, $include = null, string $contentType = self::contentTypes['getPayments'][0])
    {

        // verify the required parameter 'x_api_token' is set
        if ($x_api_token === null || (is_array($x_api_token) && count($x_api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_token when calling getPayments'
            );
        }

        // verify the required parameter 'x_requested_with' is set
        if ($x_requested_with === null || (is_array($x_requested_with) && count($x_requested_with) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_requested_with when calling getPayments'
            );
        }



        $resourcePath = '/api/v1/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_api_token !== null) {
            $headerParams['X-Api-Token'] = ObjectSerializer::toHeaderValue($x_api_token);
        }
        // header params
        if ($x_requested_with !== null) {
            $headerParams['X-Requested-With'] = ObjectSerializer::toHeaderValue($x_requested_with);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \IvkeyMinds\InvoiceNinjaClient\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaymentsCreate
     *
     * Gets a new blank Payment object
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentsCreate'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \IvkeyMinds\InvoiceNinjaClient\Model\Payment|\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError|\IvkeyMinds\InvoiceNinjaClient\Model\Error
     */
    public function getPaymentsCreate($x_api_token, $x_requested_with, $include = null, string $contentType = self::contentTypes['getPaymentsCreate'][0])
    {
        list($response) = $this->getPaymentsCreateWithHttpInfo($x_api_token, $x_requested_with, $include, $contentType);
        return $response;
    }

    /**
     * Operation getPaymentsCreateWithHttpInfo
     *
     * Gets a new blank Payment object
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentsCreate'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \IvkeyMinds\InvoiceNinjaClient\Model\Payment|\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError|\IvkeyMinds\InvoiceNinjaClient\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentsCreateWithHttpInfo($x_api_token, $x_requested_with, $include = null, string $contentType = self::contentTypes['getPaymentsCreate'][0])
    {
        $request = $this->getPaymentsCreateRequest($x_api_token, $x_requested_with, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\Payment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\Payment' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\Payment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\IvkeyMinds\InvoiceNinjaClient\Model\Payment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512);
                    } catch (\Exception $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaymentsCreateAsync
     *
     * Gets a new blank Payment object
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentsCreateAsync($x_api_token, $x_requested_with, $include = null, string $contentType = self::contentTypes['getPaymentsCreate'][0])
    {
        return $this->getPaymentsCreateAsyncWithHttpInfo($x_api_token, $x_requested_with, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentsCreateAsyncWithHttpInfo
     *
     * Gets a new blank Payment object
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentsCreateAsyncWithHttpInfo($x_api_token, $x_requested_with, $include = null, string $contentType = self::contentTypes['getPaymentsCreate'][0])
    {
        $returnType = '\IvkeyMinds\InvoiceNinjaClient\Model\Payment';
        $request = $this->getPaymentsCreateRequest($x_api_token, $x_requested_with, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaymentsCreate'
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPaymentsCreateRequest($x_api_token, $x_requested_with, $include = null, string $contentType = self::contentTypes['getPaymentsCreate'][0])
    {

        // verify the required parameter 'x_api_token' is set
        if ($x_api_token === null || (is_array($x_api_token) && count($x_api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_token when calling getPaymentsCreate'
            );
        }

        // verify the required parameter 'x_requested_with' is set
        if ($x_requested_with === null || (is_array($x_requested_with) && count($x_requested_with) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_requested_with when calling getPaymentsCreate'
            );
        }



        $resourcePath = '/api/v1/payments/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_api_token !== null) {
            $headerParams['X-Api-Token'] = ObjectSerializer::toHeaderValue($x_api_token);
        }
        // header params
        if ($x_requested_with !== null) {
            $headerParams['X-Requested-With'] = ObjectSerializer::toHeaderValue($x_requested_with);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \IvkeyMinds\InvoiceNinjaClient\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation showPayment
     *
     * Shows an Payment
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The Payment Hashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['showPayment'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \IvkeyMinds\InvoiceNinjaClient\Model\Payment|\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError|\IvkeyMinds\InvoiceNinjaClient\Model\Error
     */
    public function showPayment($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['showPayment'][0])
    {
        list($response) = $this->showPaymentWithHttpInfo($x_api_token, $x_requested_with, $id, $include, $contentType);
        return $response;
    }

    /**
     * Operation showPaymentWithHttpInfo
     *
     * Shows an Payment
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The Payment Hashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['showPayment'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \IvkeyMinds\InvoiceNinjaClient\Model\Payment|\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError|\IvkeyMinds\InvoiceNinjaClient\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function showPaymentWithHttpInfo($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['showPayment'][0])
    {
        $request = $this->showPaymentRequest($x_api_token, $x_requested_with, $id, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\Payment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\Payment' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\Payment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\IvkeyMinds\InvoiceNinjaClient\Model\Payment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512);
                    } catch (\Exception $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation showPaymentAsync
     *
     * Shows an Payment
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The Payment Hashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['showPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showPaymentAsync($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['showPayment'][0])
    {
        return $this->showPaymentAsyncWithHttpInfo($x_api_token, $x_requested_with, $id, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation showPaymentAsyncWithHttpInfo
     *
     * Shows an Payment
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The Payment Hashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['showPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showPaymentAsyncWithHttpInfo($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['showPayment'][0])
    {
        $returnType = '\IvkeyMinds\InvoiceNinjaClient\Model\Payment';
        $request = $this->showPaymentRequest($x_api_token, $x_requested_with, $id, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'showPayment'
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The Payment Hashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['showPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function showPaymentRequest($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['showPayment'][0])
    {

        // verify the required parameter 'x_api_token' is set
        if ($x_api_token === null || (is_array($x_api_token) && count($x_api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_token when calling showPayment'
            );
        }

        // verify the required parameter 'x_requested_with' is set
        if ($x_requested_with === null || (is_array($x_requested_with) && count($x_requested_with) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_requested_with when calling showPayment'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling showPayment'
            );
        }



        $resourcePath = '/api/v1/payments/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_api_token !== null) {
            $headerParams['X-Api-Token'] = ObjectSerializer::toHeaderValue($x_api_token);
        }
        // header params
        if ($x_requested_with !== null) {
            $headerParams['X-Requested-With'] = ObjectSerializer::toHeaderValue($x_requested_with);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \IvkeyMinds\InvoiceNinjaClient\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation storePayment
     *
     * Adds a Payment
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\Payment $payment The payment request (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storePayment'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \IvkeyMinds\InvoiceNinjaClient\Model\Payment|\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError|\IvkeyMinds\InvoiceNinjaClient\Model\Error
     */
    public function storePayment($x_api_token, $x_requested_with, $payment, $include = null, string $contentType = self::contentTypes['storePayment'][0])
    {
        list($response) = $this->storePaymentWithHttpInfo($x_api_token, $x_requested_with, $payment, $include, $contentType);
        return $response;
    }

    /**
     * Operation storePaymentWithHttpInfo
     *
     * Adds a Payment
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\Payment $payment The payment request (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storePayment'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \IvkeyMinds\InvoiceNinjaClient\Model\Payment|\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError|\IvkeyMinds\InvoiceNinjaClient\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function storePaymentWithHttpInfo($x_api_token, $x_requested_with, $payment, $include = null, string $contentType = self::contentTypes['storePayment'][0])
    {
        $request = $this->storePaymentRequest($x_api_token, $x_requested_with, $payment, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\Payment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\Payment' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\Payment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\IvkeyMinds\InvoiceNinjaClient\Model\Payment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512);
                    } catch (\Exception $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation storePaymentAsync
     *
     * Adds a Payment
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\Payment $payment The payment request (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storePayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storePaymentAsync($x_api_token, $x_requested_with, $payment, $include = null, string $contentType = self::contentTypes['storePayment'][0])
    {
        return $this->storePaymentAsyncWithHttpInfo($x_api_token, $x_requested_with, $payment, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storePaymentAsyncWithHttpInfo
     *
     * Adds a Payment
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\Payment $payment The payment request (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storePayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storePaymentAsyncWithHttpInfo($x_api_token, $x_requested_with, $payment, $include = null, string $contentType = self::contentTypes['storePayment'][0])
    {
        $returnType = '\IvkeyMinds\InvoiceNinjaClient\Model\Payment';
        $request = $this->storePaymentRequest($x_api_token, $x_requested_with, $payment, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'storePayment'
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\Payment $payment The payment request (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storePayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function storePaymentRequest($x_api_token, $x_requested_with, $payment, $include = null, string $contentType = self::contentTypes['storePayment'][0])
    {

        // verify the required parameter 'x_api_token' is set
        if ($x_api_token === null || (is_array($x_api_token) && count($x_api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_token when calling storePayment'
            );
        }

        // verify the required parameter 'x_requested_with' is set
        if ($x_requested_with === null || (is_array($x_requested_with) && count($x_requested_with) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_requested_with when calling storePayment'
            );
        }

        // verify the required parameter 'payment' is set
        if ($payment === null || (is_array($payment) && count($payment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment when calling storePayment'
            );
        }



        $resourcePath = '/api/v1/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_api_token !== null) {
            $headerParams['X-Api-Token'] = ObjectSerializer::toHeaderValue($x_api_token);
        }
        // header params
        if ($x_requested_with !== null) {
            $headerParams['X-Requested-With'] = ObjectSerializer::toHeaderValue($x_requested_with);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($payment)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \IvkeyMinds\InvoiceNinjaClient\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($payment));
            } else {
                $httpBody = $payment;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \IvkeyMinds\InvoiceNinjaClient\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation storeRefund
     *
     * Adds a Refund
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\Payment $payment The refund request (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storeRefund'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \IvkeyMinds\InvoiceNinjaClient\Model\Payment|\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError|\IvkeyMinds\InvoiceNinjaClient\Model\Error
     */
    public function storeRefund($x_api_token, $x_requested_with, $payment, $include = null, string $contentType = self::contentTypes['storeRefund'][0])
    {
        list($response) = $this->storeRefundWithHttpInfo($x_api_token, $x_requested_with, $payment, $include, $contentType);
        return $response;
    }

    /**
     * Operation storeRefundWithHttpInfo
     *
     * Adds a Refund
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\Payment $payment The refund request (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storeRefund'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \IvkeyMinds\InvoiceNinjaClient\Model\Payment|\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError|\IvkeyMinds\InvoiceNinjaClient\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function storeRefundWithHttpInfo($x_api_token, $x_requested_with, $payment, $include = null, string $contentType = self::contentTypes['storeRefund'][0])
    {
        $request = $this->storeRefundRequest($x_api_token, $x_requested_with, $payment, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\Payment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\Payment' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\Payment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\IvkeyMinds\InvoiceNinjaClient\Model\Payment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512);
                    } catch (\Exception $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation storeRefundAsync
     *
     * Adds a Refund
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\Payment $payment The refund request (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storeRefund'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storeRefundAsync($x_api_token, $x_requested_with, $payment, $include = null, string $contentType = self::contentTypes['storeRefund'][0])
    {
        return $this->storeRefundAsyncWithHttpInfo($x_api_token, $x_requested_with, $payment, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storeRefundAsyncWithHttpInfo
     *
     * Adds a Refund
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\Payment $payment The refund request (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storeRefund'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storeRefundAsyncWithHttpInfo($x_api_token, $x_requested_with, $payment, $include = null, string $contentType = self::contentTypes['storeRefund'][0])
    {
        $returnType = '\IvkeyMinds\InvoiceNinjaClient\Model\Payment';
        $request = $this->storeRefundRequest($x_api_token, $x_requested_with, $payment, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'storeRefund'
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\Payment $payment The refund request (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storeRefund'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function storeRefundRequest($x_api_token, $x_requested_with, $payment, $include = null, string $contentType = self::contentTypes['storeRefund'][0])
    {

        // verify the required parameter 'x_api_token' is set
        if ($x_api_token === null || (is_array($x_api_token) && count($x_api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_token when calling storeRefund'
            );
        }

        // verify the required parameter 'x_requested_with' is set
        if ($x_requested_with === null || (is_array($x_requested_with) && count($x_requested_with) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_requested_with when calling storeRefund'
            );
        }

        // verify the required parameter 'payment' is set
        if ($payment === null || (is_array($payment) && count($payment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment when calling storeRefund'
            );
        }



        $resourcePath = '/api/v1/payments/refund';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_api_token !== null) {
            $headerParams['X-Api-Token'] = ObjectSerializer::toHeaderValue($x_api_token);
        }
        // header params
        if ($x_requested_with !== null) {
            $headerParams['X-Requested-With'] = ObjectSerializer::toHeaderValue($x_requested_with);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($payment)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \IvkeyMinds\InvoiceNinjaClient\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($payment));
            } else {
                $httpBody = $payment;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \IvkeyMinds\InvoiceNinjaClient\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePayment
     *
     * Updates an Payment
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The Payment Hashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayment'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \IvkeyMinds\InvoiceNinjaClient\Model\Payment|\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError|\IvkeyMinds\InvoiceNinjaClient\Model\Error
     */
    public function updatePayment($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['updatePayment'][0])
    {
        list($response) = $this->updatePaymentWithHttpInfo($x_api_token, $x_requested_with, $id, $include, $contentType);
        return $response;
    }

    /**
     * Operation updatePaymentWithHttpInfo
     *
     * Updates an Payment
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The Payment Hashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayment'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \IvkeyMinds\InvoiceNinjaClient\Model\Payment|\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError|\IvkeyMinds\InvoiceNinjaClient\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePaymentWithHttpInfo($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['updatePayment'][0])
    {
        $request = $this->updatePaymentRequest($x_api_token, $x_requested_with, $id, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\Payment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\Payment' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\Payment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\IvkeyMinds\InvoiceNinjaClient\Model\Payment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512);
                    } catch (\Exception $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePaymentAsync
     *
     * Updates an Payment
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The Payment Hashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePaymentAsync($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['updatePayment'][0])
    {
        return $this->updatePaymentAsyncWithHttpInfo($x_api_token, $x_requested_with, $id, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePaymentAsyncWithHttpInfo
     *
     * Updates an Payment
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The Payment Hashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePaymentAsyncWithHttpInfo($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['updatePayment'][0])
    {
        $returnType = '\IvkeyMinds\InvoiceNinjaClient\Model\Payment';
        $request = $this->updatePaymentRequest($x_api_token, $x_requested_with, $id, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePayment'
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The Payment Hashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePaymentRequest($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['updatePayment'][0])
    {

        // verify the required parameter 'x_api_token' is set
        if ($x_api_token === null || (is_array($x_api_token) && count($x_api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_token when calling updatePayment'
            );
        }

        // verify the required parameter 'x_requested_with' is set
        if ($x_requested_with === null || (is_array($x_requested_with) && count($x_requested_with) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_requested_with when calling updatePayment'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updatePayment'
            );
        }



        $resourcePath = '/api/v1/payments/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_api_token !== null) {
            $headerParams['X-Api-Token'] = ObjectSerializer::toHeaderValue($x_api_token);
        }
        // header params
        if ($x_requested_with !== null) {
            $headerParams['X-Requested-With'] = ObjectSerializer::toHeaderValue($x_requested_with);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \IvkeyMinds\InvoiceNinjaClient\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uploadPayment
     *
     * Uploads a document to a payment
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The Payment Hashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadPayment'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \IvkeyMinds\InvoiceNinjaClient\Model\Payment|\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError|\IvkeyMinds\InvoiceNinjaClient\Model\Error
     */
    public function uploadPayment($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['uploadPayment'][0])
    {
        list($response) = $this->uploadPaymentWithHttpInfo($x_api_token, $x_requested_with, $id, $include, $contentType);
        return $response;
    }

    /**
     * Operation uploadPaymentWithHttpInfo
     *
     * Uploads a document to a payment
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The Payment Hashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadPayment'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \IvkeyMinds\InvoiceNinjaClient\Model\Payment|\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError|\IvkeyMinds\InvoiceNinjaClient\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadPaymentWithHttpInfo($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['uploadPayment'][0])
    {
        $request = $this->uploadPaymentRequest($x_api_token, $x_requested_with, $id, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\Payment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\Payment' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\Payment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\IvkeyMinds\InvoiceNinjaClient\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\IvkeyMinds\InvoiceNinjaClient\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512);
                            } catch (\Exception $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\IvkeyMinds\InvoiceNinjaClient\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\IvkeyMinds\InvoiceNinjaClient\Model\Payment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512);
                    } catch (\Exception $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation uploadPaymentAsync
     *
     * Uploads a document to a payment
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The Payment Hashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadPaymentAsync($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['uploadPayment'][0])
    {
        return $this->uploadPaymentAsyncWithHttpInfo($x_api_token, $x_requested_with, $id, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadPaymentAsyncWithHttpInfo
     *
     * Uploads a document to a payment
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The Payment Hashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadPaymentAsyncWithHttpInfo($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['uploadPayment'][0])
    {
        $returnType = '\IvkeyMinds\InvoiceNinjaClient\Model\Payment';
        $request = $this->uploadPaymentRequest($x_api_token, $x_requested_with, $id, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadPayment'
     *
     * @param  string $x_api_token The API token to be used for authentication (required)
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  string $id The Payment Hashed ID (required)
     * @param  string $include Includes child relationships in the response, format is comma separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function uploadPaymentRequest($x_api_token, $x_requested_with, $id, $include = null, string $contentType = self::contentTypes['uploadPayment'][0])
    {

        // verify the required parameter 'x_api_token' is set
        if ($x_api_token === null || (is_array($x_api_token) && count($x_api_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_token when calling uploadPayment'
            );
        }

        // verify the required parameter 'x_requested_with' is set
        if ($x_requested_with === null || (is_array($x_requested_with) && count($x_requested_with) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_requested_with when calling uploadPayment'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling uploadPayment'
            );
        }



        $resourcePath = '/api/v1/payments/{id}/upload';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_api_token !== null) {
            $headerParams['X-Api-Token'] = ObjectSerializer::toHeaderValue($x_api_token);
        }
        // header params
        if ($x_requested_with !== null) {
            $headerParams['X-Requested-With'] = ObjectSerializer::toHeaderValue($x_requested_with);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \IvkeyMinds\InvoiceNinjaClient\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
