<?php
/**
 * ReportsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  IvkeyMinds\InvoiceNinjaClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Invoice Ninja
 *
 * Invoice Ninja. Open Source Invoicing lives here.
 *
 * The version of the OpenAPI document: 5.5.58
 * Contact: contact@invoiceninja.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace IvkeyMinds\InvoiceNinjaClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use IvkeyMinds\InvoiceNinjaClient\ApiException;
use IvkeyMinds\InvoiceNinjaClient\Configuration;
use IvkeyMinds\InvoiceNinjaClient\HeaderSelector;
use IvkeyMinds\InvoiceNinjaClient\ObjectSerializer;

/**
 * ReportsApi Class Doc Comment
 *
 * @category Class
 * @package  IvkeyMinds\InvoiceNinjaClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ReportsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getClientReport' => [
            'application/json',
        ],
        'getContactReport' => [
            'application/json',
        ],
        'getCreditReport' => [
            'application/json',
        ],
        'getDocumentReport' => [
            'application/json',
        ],
        'getExpenseReport' => [
            'application/json',
        ],
        'getInvoiceItemReport' => [
            'application/json',
        ],
        'getInvoiceReport' => [
            'application/json',
        ],
        'getPaymentReport' => [
            'application/json',
        ],
        'getProductReport' => [
            'application/json',
        ],
        'getProductSalesReport' => [
            'application/json',
        ],
        'getProfitLossReport' => [
            'application/json',
        ],
        'getQuoteItemReport' => [
            'application/json',
        ],
        'getQuoteReport' => [
            'application/json',
        ],
        'getRecurringInvoiceReport' => [
            'application/json',
        ],
        'getTaskReport' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getClientReport
     *
     * Client reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClientReport'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getClientReport($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getClientReport'][0])
    {
        $this->getClientReportWithHttpInfo($x_requested_with, $generic_report_schema, $contentType);
    }

    /**
     * Operation getClientReportWithHttpInfo
     *
     * Client reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClientReport'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getClientReportWithHttpInfo($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getClientReport'][0])
    {
        $request = $this->getClientReportRequest($x_requested_with, $generic_report_schema, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getClientReportAsync
     *
     * Client reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClientReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClientReportAsync($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getClientReport'][0])
    {
        return $this->getClientReportAsyncWithHttpInfo($x_requested_with, $generic_report_schema, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getClientReportAsyncWithHttpInfo
     *
     * Client reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClientReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClientReportAsyncWithHttpInfo($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getClientReport'][0])
    {
        $returnType = '';
        $request = $this->getClientReportRequest($x_requested_with, $generic_report_schema, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getClientReport'
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClientReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getClientReportRequest($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getClientReport'][0])
    {

        // verify the required parameter 'x_requested_with' is set
        if ($x_requested_with === null || (is_array($x_requested_with) && count($x_requested_with) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_requested_with when calling getClientReport'
            );
        }

        // verify the required parameter 'generic_report_schema' is set
        if ($generic_report_schema === null || (is_array($generic_report_schema) && count($generic_report_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $generic_report_schema when calling getClientReport'
            );
        }


        $resourcePath = '/api/v1/reports/clients';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_requested_with !== null) {
            $headerParams['X-Requested-With'] = ObjectSerializer::toHeaderValue($x_requested_with);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($generic_report_schema)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($generic_report_schema));
            } else {
                $httpBody = $generic_report_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContactReport
     *
     * Contact reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContactReport'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getContactReport($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getContactReport'][0])
    {
        $this->getContactReportWithHttpInfo($x_requested_with, $generic_report_schema, $contentType);
    }

    /**
     * Operation getContactReportWithHttpInfo
     *
     * Contact reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContactReport'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContactReportWithHttpInfo($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getContactReport'][0])
    {
        $request = $this->getContactReportRequest($x_requested_with, $generic_report_schema, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContactReportAsync
     *
     * Contact reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContactReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContactReportAsync($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getContactReport'][0])
    {
        return $this->getContactReportAsyncWithHttpInfo($x_requested_with, $generic_report_schema, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContactReportAsyncWithHttpInfo
     *
     * Contact reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContactReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContactReportAsyncWithHttpInfo($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getContactReport'][0])
    {
        $returnType = '';
        $request = $this->getContactReportRequest($x_requested_with, $generic_report_schema, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContactReport'
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContactReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getContactReportRequest($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getContactReport'][0])
    {

        // verify the required parameter 'x_requested_with' is set
        if ($x_requested_with === null || (is_array($x_requested_with) && count($x_requested_with) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_requested_with when calling getContactReport'
            );
        }

        // verify the required parameter 'generic_report_schema' is set
        if ($generic_report_schema === null || (is_array($generic_report_schema) && count($generic_report_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $generic_report_schema when calling getContactReport'
            );
        }


        $resourcePath = '/api/v1/reports/contacts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_requested_with !== null) {
            $headerParams['X-Requested-With'] = ObjectSerializer::toHeaderValue($x_requested_with);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($generic_report_schema)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($generic_report_schema));
            } else {
                $httpBody = $generic_report_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCreditReport
     *
     * Credit reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCreditReport'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getCreditReport($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getCreditReport'][0])
    {
        $this->getCreditReportWithHttpInfo($x_requested_with, $generic_report_schema, $contentType);
    }

    /**
     * Operation getCreditReportWithHttpInfo
     *
     * Credit reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCreditReport'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCreditReportWithHttpInfo($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getCreditReport'][0])
    {
        $request = $this->getCreditReportRequest($x_requested_with, $generic_report_schema, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCreditReportAsync
     *
     * Credit reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCreditReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCreditReportAsync($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getCreditReport'][0])
    {
        return $this->getCreditReportAsyncWithHttpInfo($x_requested_with, $generic_report_schema, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCreditReportAsyncWithHttpInfo
     *
     * Credit reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCreditReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCreditReportAsyncWithHttpInfo($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getCreditReport'][0])
    {
        $returnType = '';
        $request = $this->getCreditReportRequest($x_requested_with, $generic_report_schema, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCreditReport'
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCreditReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCreditReportRequest($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getCreditReport'][0])
    {

        // verify the required parameter 'x_requested_with' is set
        if ($x_requested_with === null || (is_array($x_requested_with) && count($x_requested_with) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_requested_with when calling getCreditReport'
            );
        }

        // verify the required parameter 'generic_report_schema' is set
        if ($generic_report_schema === null || (is_array($generic_report_schema) && count($generic_report_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $generic_report_schema when calling getCreditReport'
            );
        }


        $resourcePath = '/api/v1/reports/credit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_requested_with !== null) {
            $headerParams['X-Requested-With'] = ObjectSerializer::toHeaderValue($x_requested_with);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($generic_report_schema)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($generic_report_schema));
            } else {
                $httpBody = $generic_report_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDocumentReport
     *
     * Document reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentReport'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getDocumentReport($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getDocumentReport'][0])
    {
        $this->getDocumentReportWithHttpInfo($x_requested_with, $generic_report_schema, $contentType);
    }

    /**
     * Operation getDocumentReportWithHttpInfo
     *
     * Document reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentReport'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDocumentReportWithHttpInfo($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getDocumentReport'][0])
    {
        $request = $this->getDocumentReportRequest($x_requested_with, $generic_report_schema, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDocumentReportAsync
     *
     * Document reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDocumentReportAsync($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getDocumentReport'][0])
    {
        return $this->getDocumentReportAsyncWithHttpInfo($x_requested_with, $generic_report_schema, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDocumentReportAsyncWithHttpInfo
     *
     * Document reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDocumentReportAsyncWithHttpInfo($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getDocumentReport'][0])
    {
        $returnType = '';
        $request = $this->getDocumentReportRequest($x_requested_with, $generic_report_schema, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDocumentReport'
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDocumentReportRequest($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getDocumentReport'][0])
    {

        // verify the required parameter 'x_requested_with' is set
        if ($x_requested_with === null || (is_array($x_requested_with) && count($x_requested_with) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_requested_with when calling getDocumentReport'
            );
        }

        // verify the required parameter 'generic_report_schema' is set
        if ($generic_report_schema === null || (is_array($generic_report_schema) && count($generic_report_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $generic_report_schema when calling getDocumentReport'
            );
        }


        $resourcePath = '/api/v1/reports/documents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_requested_with !== null) {
            $headerParams['X-Requested-With'] = ObjectSerializer::toHeaderValue($x_requested_with);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($generic_report_schema)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($generic_report_schema));
            } else {
                $httpBody = $generic_report_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getExpenseReport
     *
     * Expense reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getExpenseReport'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getExpenseReport($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getExpenseReport'][0])
    {
        $this->getExpenseReportWithHttpInfo($x_requested_with, $generic_report_schema, $contentType);
    }

    /**
     * Operation getExpenseReportWithHttpInfo
     *
     * Expense reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getExpenseReport'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getExpenseReportWithHttpInfo($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getExpenseReport'][0])
    {
        $request = $this->getExpenseReportRequest($x_requested_with, $generic_report_schema, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getExpenseReportAsync
     *
     * Expense reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getExpenseReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExpenseReportAsync($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getExpenseReport'][0])
    {
        return $this->getExpenseReportAsyncWithHttpInfo($x_requested_with, $generic_report_schema, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getExpenseReportAsyncWithHttpInfo
     *
     * Expense reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getExpenseReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExpenseReportAsyncWithHttpInfo($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getExpenseReport'][0])
    {
        $returnType = '';
        $request = $this->getExpenseReportRequest($x_requested_with, $generic_report_schema, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getExpenseReport'
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getExpenseReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getExpenseReportRequest($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getExpenseReport'][0])
    {

        // verify the required parameter 'x_requested_with' is set
        if ($x_requested_with === null || (is_array($x_requested_with) && count($x_requested_with) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_requested_with when calling getExpenseReport'
            );
        }

        // verify the required parameter 'generic_report_schema' is set
        if ($generic_report_schema === null || (is_array($generic_report_schema) && count($generic_report_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $generic_report_schema when calling getExpenseReport'
            );
        }


        $resourcePath = '/api/v1/reports/expense';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_requested_with !== null) {
            $headerParams['X-Requested-With'] = ObjectSerializer::toHeaderValue($x_requested_with);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($generic_report_schema)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($generic_report_schema));
            } else {
                $httpBody = $generic_report_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInvoiceItemReport
     *
     * Invoice item reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvoiceItemReport'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getInvoiceItemReport($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getInvoiceItemReport'][0])
    {
        $this->getInvoiceItemReportWithHttpInfo($x_requested_with, $generic_report_schema, $contentType);
    }

    /**
     * Operation getInvoiceItemReportWithHttpInfo
     *
     * Invoice item reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvoiceItemReport'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInvoiceItemReportWithHttpInfo($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getInvoiceItemReport'][0])
    {
        $request = $this->getInvoiceItemReportRequest($x_requested_with, $generic_report_schema, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInvoiceItemReportAsync
     *
     * Invoice item reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvoiceItemReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoiceItemReportAsync($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getInvoiceItemReport'][0])
    {
        return $this->getInvoiceItemReportAsyncWithHttpInfo($x_requested_with, $generic_report_schema, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInvoiceItemReportAsyncWithHttpInfo
     *
     * Invoice item reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvoiceItemReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoiceItemReportAsyncWithHttpInfo($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getInvoiceItemReport'][0])
    {
        $returnType = '';
        $request = $this->getInvoiceItemReportRequest($x_requested_with, $generic_report_schema, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInvoiceItemReport'
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvoiceItemReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInvoiceItemReportRequest($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getInvoiceItemReport'][0])
    {

        // verify the required parameter 'x_requested_with' is set
        if ($x_requested_with === null || (is_array($x_requested_with) && count($x_requested_with) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_requested_with when calling getInvoiceItemReport'
            );
        }

        // verify the required parameter 'generic_report_schema' is set
        if ($generic_report_schema === null || (is_array($generic_report_schema) && count($generic_report_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $generic_report_schema when calling getInvoiceItemReport'
            );
        }


        $resourcePath = '/api/v1/reports/invoice_items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_requested_with !== null) {
            $headerParams['X-Requested-With'] = ObjectSerializer::toHeaderValue($x_requested_with);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($generic_report_schema)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($generic_report_schema));
            } else {
                $httpBody = $generic_report_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInvoiceReport
     *
     * Invoice reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvoiceReport'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getInvoiceReport($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getInvoiceReport'][0])
    {
        $this->getInvoiceReportWithHttpInfo($x_requested_with, $generic_report_schema, $contentType);
    }

    /**
     * Operation getInvoiceReportWithHttpInfo
     *
     * Invoice reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvoiceReport'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInvoiceReportWithHttpInfo($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getInvoiceReport'][0])
    {
        $request = $this->getInvoiceReportRequest($x_requested_with, $generic_report_schema, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInvoiceReportAsync
     *
     * Invoice reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvoiceReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoiceReportAsync($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getInvoiceReport'][0])
    {
        return $this->getInvoiceReportAsyncWithHttpInfo($x_requested_with, $generic_report_schema, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInvoiceReportAsyncWithHttpInfo
     *
     * Invoice reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvoiceReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoiceReportAsyncWithHttpInfo($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getInvoiceReport'][0])
    {
        $returnType = '';
        $request = $this->getInvoiceReportRequest($x_requested_with, $generic_report_schema, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInvoiceReport'
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvoiceReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInvoiceReportRequest($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getInvoiceReport'][0])
    {

        // verify the required parameter 'x_requested_with' is set
        if ($x_requested_with === null || (is_array($x_requested_with) && count($x_requested_with) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_requested_with when calling getInvoiceReport'
            );
        }

        // verify the required parameter 'generic_report_schema' is set
        if ($generic_report_schema === null || (is_array($generic_report_schema) && count($generic_report_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $generic_report_schema when calling getInvoiceReport'
            );
        }


        $resourcePath = '/api/v1/reports/invoices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_requested_with !== null) {
            $headerParams['X-Requested-With'] = ObjectSerializer::toHeaderValue($x_requested_with);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($generic_report_schema)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($generic_report_schema));
            } else {
                $httpBody = $generic_report_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaymentReport
     *
     * Payment reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentReport'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getPaymentReport($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getPaymentReport'][0])
    {
        $this->getPaymentReportWithHttpInfo($x_requested_with, $generic_report_schema, $contentType);
    }

    /**
     * Operation getPaymentReportWithHttpInfo
     *
     * Payment reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentReport'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentReportWithHttpInfo($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getPaymentReport'][0])
    {
        $request = $this->getPaymentReportRequest($x_requested_with, $generic_report_schema, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaymentReportAsync
     *
     * Payment reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentReportAsync($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getPaymentReport'][0])
    {
        return $this->getPaymentReportAsyncWithHttpInfo($x_requested_with, $generic_report_schema, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentReportAsyncWithHttpInfo
     *
     * Payment reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentReportAsyncWithHttpInfo($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getPaymentReport'][0])
    {
        $returnType = '';
        $request = $this->getPaymentReportRequest($x_requested_with, $generic_report_schema, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaymentReport'
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPaymentReportRequest($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getPaymentReport'][0])
    {

        // verify the required parameter 'x_requested_with' is set
        if ($x_requested_with === null || (is_array($x_requested_with) && count($x_requested_with) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_requested_with when calling getPaymentReport'
            );
        }

        // verify the required parameter 'generic_report_schema' is set
        if ($generic_report_schema === null || (is_array($generic_report_schema) && count($generic_report_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $generic_report_schema when calling getPaymentReport'
            );
        }


        $resourcePath = '/api/v1/reports/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_requested_with !== null) {
            $headerParams['X-Requested-With'] = ObjectSerializer::toHeaderValue($x_requested_with);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($generic_report_schema)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($generic_report_schema));
            } else {
                $httpBody = $generic_report_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProductReport
     *
     * Product reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductReport'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getProductReport($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getProductReport'][0])
    {
        $this->getProductReportWithHttpInfo($x_requested_with, $generic_report_schema, $contentType);
    }

    /**
     * Operation getProductReportWithHttpInfo
     *
     * Product reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductReport'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductReportWithHttpInfo($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getProductReport'][0])
    {
        $request = $this->getProductReportRequest($x_requested_with, $generic_report_schema, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProductReportAsync
     *
     * Product reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductReportAsync($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getProductReport'][0])
    {
        return $this->getProductReportAsyncWithHttpInfo($x_requested_with, $generic_report_schema, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProductReportAsyncWithHttpInfo
     *
     * Product reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductReportAsyncWithHttpInfo($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getProductReport'][0])
    {
        $returnType = '';
        $request = $this->getProductReportRequest($x_requested_with, $generic_report_schema, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProductReport'
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProductReportRequest($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getProductReport'][0])
    {

        // verify the required parameter 'x_requested_with' is set
        if ($x_requested_with === null || (is_array($x_requested_with) && count($x_requested_with) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_requested_with when calling getProductReport'
            );
        }

        // verify the required parameter 'generic_report_schema' is set
        if ($generic_report_schema === null || (is_array($generic_report_schema) && count($generic_report_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $generic_report_schema when calling getProductReport'
            );
        }


        $resourcePath = '/api/v1/reports/products';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_requested_with !== null) {
            $headerParams['X-Requested-With'] = ObjectSerializer::toHeaderValue($x_requested_with);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($generic_report_schema)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($generic_report_schema));
            } else {
                $httpBody = $generic_report_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProductSalesReport
     *
     * Product Salesreports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductSalesReport'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getProductSalesReport($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getProductSalesReport'][0])
    {
        $this->getProductSalesReportWithHttpInfo($x_requested_with, $generic_report_schema, $contentType);
    }

    /**
     * Operation getProductSalesReportWithHttpInfo
     *
     * Product Salesreports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductSalesReport'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductSalesReportWithHttpInfo($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getProductSalesReport'][0])
    {
        $request = $this->getProductSalesReportRequest($x_requested_with, $generic_report_schema, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProductSalesReportAsync
     *
     * Product Salesreports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductSalesReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductSalesReportAsync($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getProductSalesReport'][0])
    {
        return $this->getProductSalesReportAsyncWithHttpInfo($x_requested_with, $generic_report_schema, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProductSalesReportAsyncWithHttpInfo
     *
     * Product Salesreports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductSalesReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductSalesReportAsyncWithHttpInfo($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getProductSalesReport'][0])
    {
        $returnType = '';
        $request = $this->getProductSalesReportRequest($x_requested_with, $generic_report_schema, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProductSalesReport'
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductSalesReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProductSalesReportRequest($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getProductSalesReport'][0])
    {

        // verify the required parameter 'x_requested_with' is set
        if ($x_requested_with === null || (is_array($x_requested_with) && count($x_requested_with) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_requested_with when calling getProductSalesReport'
            );
        }

        // verify the required parameter 'generic_report_schema' is set
        if ($generic_report_schema === null || (is_array($generic_report_schema) && count($generic_report_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $generic_report_schema when calling getProductSalesReport'
            );
        }


        $resourcePath = '/api/v1/reports/product_sales';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_requested_with !== null) {
            $headerParams['X-Requested-With'] = ObjectSerializer::toHeaderValue($x_requested_with);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($generic_report_schema)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($generic_report_schema));
            } else {
                $httpBody = $generic_report_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProfitLossReport
     *
     * Profit loss reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProfitLossReport'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getProfitLossReport($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getProfitLossReport'][0])
    {
        $this->getProfitLossReportWithHttpInfo($x_requested_with, $generic_report_schema, $contentType);
    }

    /**
     * Operation getProfitLossReportWithHttpInfo
     *
     * Profit loss reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProfitLossReport'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProfitLossReportWithHttpInfo($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getProfitLossReport'][0])
    {
        $request = $this->getProfitLossReportRequest($x_requested_with, $generic_report_schema, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProfitLossReportAsync
     *
     * Profit loss reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProfitLossReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProfitLossReportAsync($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getProfitLossReport'][0])
    {
        return $this->getProfitLossReportAsyncWithHttpInfo($x_requested_with, $generic_report_schema, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProfitLossReportAsyncWithHttpInfo
     *
     * Profit loss reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProfitLossReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProfitLossReportAsyncWithHttpInfo($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getProfitLossReport'][0])
    {
        $returnType = '';
        $request = $this->getProfitLossReportRequest($x_requested_with, $generic_report_schema, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProfitLossReport'
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProfitLossReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProfitLossReportRequest($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getProfitLossReport'][0])
    {

        // verify the required parameter 'x_requested_with' is set
        if ($x_requested_with === null || (is_array($x_requested_with) && count($x_requested_with) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_requested_with when calling getProfitLossReport'
            );
        }

        // verify the required parameter 'generic_report_schema' is set
        if ($generic_report_schema === null || (is_array($generic_report_schema) && count($generic_report_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $generic_report_schema when calling getProfitLossReport'
            );
        }


        $resourcePath = '/api/v1/reports/profitloss';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_requested_with !== null) {
            $headerParams['X-Requested-With'] = ObjectSerializer::toHeaderValue($x_requested_with);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($generic_report_schema)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($generic_report_schema));
            } else {
                $httpBody = $generic_report_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQuoteItemReport
     *
     * Quote item reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getQuoteItemReport'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getQuoteItemReport($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getQuoteItemReport'][0])
    {
        $this->getQuoteItemReportWithHttpInfo($x_requested_with, $generic_report_schema, $contentType);
    }

    /**
     * Operation getQuoteItemReportWithHttpInfo
     *
     * Quote item reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getQuoteItemReport'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQuoteItemReportWithHttpInfo($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getQuoteItemReport'][0])
    {
        $request = $this->getQuoteItemReportRequest($x_requested_with, $generic_report_schema, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQuoteItemReportAsync
     *
     * Quote item reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getQuoteItemReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQuoteItemReportAsync($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getQuoteItemReport'][0])
    {
        return $this->getQuoteItemReportAsyncWithHttpInfo($x_requested_with, $generic_report_schema, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQuoteItemReportAsyncWithHttpInfo
     *
     * Quote item reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getQuoteItemReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQuoteItemReportAsyncWithHttpInfo($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getQuoteItemReport'][0])
    {
        $returnType = '';
        $request = $this->getQuoteItemReportRequest($x_requested_with, $generic_report_schema, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQuoteItemReport'
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getQuoteItemReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getQuoteItemReportRequest($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getQuoteItemReport'][0])
    {

        // verify the required parameter 'x_requested_with' is set
        if ($x_requested_with === null || (is_array($x_requested_with) && count($x_requested_with) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_requested_with when calling getQuoteItemReport'
            );
        }

        // verify the required parameter 'generic_report_schema' is set
        if ($generic_report_schema === null || (is_array($generic_report_schema) && count($generic_report_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $generic_report_schema when calling getQuoteItemReport'
            );
        }


        $resourcePath = '/api/v1/reports/quote_items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_requested_with !== null) {
            $headerParams['X-Requested-With'] = ObjectSerializer::toHeaderValue($x_requested_with);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($generic_report_schema)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($generic_report_schema));
            } else {
                $httpBody = $generic_report_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQuoteReport
     *
     * Quote reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getQuoteReport'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getQuoteReport($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getQuoteReport'][0])
    {
        $this->getQuoteReportWithHttpInfo($x_requested_with, $generic_report_schema, $contentType);
    }

    /**
     * Operation getQuoteReportWithHttpInfo
     *
     * Quote reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getQuoteReport'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQuoteReportWithHttpInfo($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getQuoteReport'][0])
    {
        $request = $this->getQuoteReportRequest($x_requested_with, $generic_report_schema, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQuoteReportAsync
     *
     * Quote reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getQuoteReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQuoteReportAsync($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getQuoteReport'][0])
    {
        return $this->getQuoteReportAsyncWithHttpInfo($x_requested_with, $generic_report_schema, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQuoteReportAsyncWithHttpInfo
     *
     * Quote reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getQuoteReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQuoteReportAsyncWithHttpInfo($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getQuoteReport'][0])
    {
        $returnType = '';
        $request = $this->getQuoteReportRequest($x_requested_with, $generic_report_schema, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQuoteReport'
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getQuoteReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getQuoteReportRequest($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getQuoteReport'][0])
    {

        // verify the required parameter 'x_requested_with' is set
        if ($x_requested_with === null || (is_array($x_requested_with) && count($x_requested_with) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_requested_with when calling getQuoteReport'
            );
        }

        // verify the required parameter 'generic_report_schema' is set
        if ($generic_report_schema === null || (is_array($generic_report_schema) && count($generic_report_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $generic_report_schema when calling getQuoteReport'
            );
        }


        $resourcePath = '/api/v1/reports/quotes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_requested_with !== null) {
            $headerParams['X-Requested-With'] = ObjectSerializer::toHeaderValue($x_requested_with);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($generic_report_schema)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($generic_report_schema));
            } else {
                $httpBody = $generic_report_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRecurringInvoiceReport
     *
     * Recurring Invoice reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecurringInvoiceReport'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getRecurringInvoiceReport($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getRecurringInvoiceReport'][0])
    {
        $this->getRecurringInvoiceReportWithHttpInfo($x_requested_with, $generic_report_schema, $contentType);
    }

    /**
     * Operation getRecurringInvoiceReportWithHttpInfo
     *
     * Recurring Invoice reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecurringInvoiceReport'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRecurringInvoiceReportWithHttpInfo($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getRecurringInvoiceReport'][0])
    {
        $request = $this->getRecurringInvoiceReportRequest($x_requested_with, $generic_report_schema, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRecurringInvoiceReportAsync
     *
     * Recurring Invoice reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecurringInvoiceReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRecurringInvoiceReportAsync($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getRecurringInvoiceReport'][0])
    {
        return $this->getRecurringInvoiceReportAsyncWithHttpInfo($x_requested_with, $generic_report_schema, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRecurringInvoiceReportAsyncWithHttpInfo
     *
     * Recurring Invoice reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecurringInvoiceReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRecurringInvoiceReportAsyncWithHttpInfo($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getRecurringInvoiceReport'][0])
    {
        $returnType = '';
        $request = $this->getRecurringInvoiceReportRequest($x_requested_with, $generic_report_schema, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRecurringInvoiceReport'
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRecurringInvoiceReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRecurringInvoiceReportRequest($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getRecurringInvoiceReport'][0])
    {

        // verify the required parameter 'x_requested_with' is set
        if ($x_requested_with === null || (is_array($x_requested_with) && count($x_requested_with) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_requested_with when calling getRecurringInvoiceReport'
            );
        }

        // verify the required parameter 'generic_report_schema' is set
        if ($generic_report_schema === null || (is_array($generic_report_schema) && count($generic_report_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $generic_report_schema when calling getRecurringInvoiceReport'
            );
        }


        $resourcePath = '/api/v1/reports/recurring_invoices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_requested_with !== null) {
            $headerParams['X-Requested-With'] = ObjectSerializer::toHeaderValue($x_requested_with);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($generic_report_schema)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($generic_report_schema));
            } else {
                $httpBody = $generic_report_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTaskReport
     *
     * Task reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTaskReport'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getTaskReport($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getTaskReport'][0])
    {
        $this->getTaskReportWithHttpInfo($x_requested_with, $generic_report_schema, $contentType);
    }

    /**
     * Operation getTaskReportWithHttpInfo
     *
     * Task reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTaskReport'] to see the possible values for this operation
     *
     * @throws \IvkeyMinds\InvoiceNinjaClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTaskReportWithHttpInfo($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getTaskReport'][0])
    {
        $request = $this->getTaskReportRequest($x_requested_with, $generic_report_schema, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IvkeyMinds\InvoiceNinjaClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTaskReportAsync
     *
     * Task reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTaskReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTaskReportAsync($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getTaskReport'][0])
    {
        return $this->getTaskReportAsyncWithHttpInfo($x_requested_with, $generic_report_schema, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTaskReportAsyncWithHttpInfo
     *
     * Task reports
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTaskReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTaskReportAsyncWithHttpInfo($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getTaskReport'][0])
    {
        $returnType = '';
        $request = $this->getTaskReportRequest($x_requested_with, $generic_report_schema, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTaskReport'
     *
     * @param  string $x_requested_with Used to send the XMLHttpRequest header (required)
     * @param  \IvkeyMinds\InvoiceNinjaClient\Model\GenericReportSchema $generic_report_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTaskReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTaskReportRequest($x_requested_with, $generic_report_schema, string $contentType = self::contentTypes['getTaskReport'][0])
    {

        // verify the required parameter 'x_requested_with' is set
        if ($x_requested_with === null || (is_array($x_requested_with) && count($x_requested_with) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_requested_with when calling getTaskReport'
            );
        }

        // verify the required parameter 'generic_report_schema' is set
        if ($generic_report_schema === null || (is_array($generic_report_schema) && count($generic_report_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $generic_report_schema when calling getTaskReport'
            );
        }


        $resourcePath = '/api/v1/reports/tasks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_requested_with !== null) {
            $headerParams['X-Requested-With'] = ObjectSerializer::toHeaderValue($x_requested_with);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($generic_report_schema)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($generic_report_schema));
            } else {
                $httpBody = $generic_report_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
