<?php
/**
 * FeesAndLimits
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  IvkeyMinds\InvoiceNinjaClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Invoice Ninja
 *
 * Invoice Ninja. Open Source Invoicing lives here.
 *
 * The version of the OpenAPI document: 5.5.58
 * Contact: contact@invoiceninja.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace IvkeyMinds\InvoiceNinjaClient\Model;

use \ArrayAccess;
use \IvkeyMinds\InvoiceNinjaClient\ObjectSerializer;

/**
 * FeesAndLimits Class Doc Comment
 *
 * @category Class
 * @package  IvkeyMinds\InvoiceNinjaClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FeesAndLimits implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FeesAndLimits';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'min_limit' => 'string',
        'max_limit' => 'string',
        'fee_amount' => 'float',
        'fee_percent' => 'float',
        'fee_tax_name1' => 'string',
        'fee_tax_name2' => 'string',
        'fee_tax_name3' => 'string',
        'fee_tax_rate1' => 'float',
        'fee_tax_rate2' => 'float',
        'fee_tax_rate3' => 'float',
        'fee_cap' => 'float',
        'adjust_fee_percent' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'min_limit' => null,
        'max_limit' => null,
        'fee_amount' => 'float',
        'fee_percent' => 'float',
        'fee_tax_name1' => null,
        'fee_tax_name2' => null,
        'fee_tax_name3' => null,
        'fee_tax_rate1' => 'float',
        'fee_tax_rate2' => 'float',
        'fee_tax_rate3' => 'float',
        'fee_cap' => 'float',
        'adjust_fee_percent' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'min_limit' => true,
        'max_limit' => true,
        'fee_amount' => true,
        'fee_percent' => true,
        'fee_tax_name1' => true,
        'fee_tax_name2' => true,
        'fee_tax_name3' => true,
        'fee_tax_rate1' => true,
        'fee_tax_rate2' => true,
        'fee_tax_rate3' => true,
        'fee_cap' => true,
        'adjust_fee_percent' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'min_limit' => 'min_limit',
        'max_limit' => 'max_limit',
        'fee_amount' => 'fee_amount',
        'fee_percent' => 'fee_percent',
        'fee_tax_name1' => 'fee_tax_name1',
        'fee_tax_name2' => 'fee_tax_name2',
        'fee_tax_name3' => 'fee_tax_name3',
        'fee_tax_rate1' => 'fee_tax_rate1',
        'fee_tax_rate2' => 'fee_tax_rate2',
        'fee_tax_rate3' => 'fee_tax_rate3',
        'fee_cap' => 'fee_cap',
        'adjust_fee_percent' => 'adjust_fee_percent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'min_limit' => 'setMinLimit',
        'max_limit' => 'setMaxLimit',
        'fee_amount' => 'setFeeAmount',
        'fee_percent' => 'setFeePercent',
        'fee_tax_name1' => 'setFeeTaxName1',
        'fee_tax_name2' => 'setFeeTaxName2',
        'fee_tax_name3' => 'setFeeTaxName3',
        'fee_tax_rate1' => 'setFeeTaxRate1',
        'fee_tax_rate2' => 'setFeeTaxRate2',
        'fee_tax_rate3' => 'setFeeTaxRate3',
        'fee_cap' => 'setFeeCap',
        'adjust_fee_percent' => 'setAdjustFeePercent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'min_limit' => 'getMinLimit',
        'max_limit' => 'getMaxLimit',
        'fee_amount' => 'getFeeAmount',
        'fee_percent' => 'getFeePercent',
        'fee_tax_name1' => 'getFeeTaxName1',
        'fee_tax_name2' => 'getFeeTaxName2',
        'fee_tax_name3' => 'getFeeTaxName3',
        'fee_tax_rate1' => 'getFeeTaxRate1',
        'fee_tax_rate2' => 'getFeeTaxRate2',
        'fee_tax_rate3' => 'getFeeTaxRate3',
        'fee_cap' => 'getFeeCap',
        'adjust_fee_percent' => 'getAdjustFeePercent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('min_limit', $data ?? [], null);
        $this->setIfExists('max_limit', $data ?? [], null);
        $this->setIfExists('fee_amount', $data ?? [], null);
        $this->setIfExists('fee_percent', $data ?? [], null);
        $this->setIfExists('fee_tax_name1', $data ?? [], null);
        $this->setIfExists('fee_tax_name2', $data ?? [], null);
        $this->setIfExists('fee_tax_name3', $data ?? [], null);
        $this->setIfExists('fee_tax_rate1', $data ?? [], null);
        $this->setIfExists('fee_tax_rate2', $data ?? [], null);
        $this->setIfExists('fee_tax_rate3', $data ?? [], null);
        $this->setIfExists('fee_cap', $data ?? [], null);
        $this->setIfExists('adjust_fee_percent', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets min_limit
     *
     * @return string|null
     */
    public function getMinLimit()
    {
        return $this->container['min_limit'];
    }

    /**
     * Sets min_limit
     *
     * @param string|null $min_limit The minimum amount accepted for this gateway
     *
     * @return self
     */
    public function setMinLimit($min_limit)
    {
        
        $this->container['min_limit'] = $min_limit;

        return $this;
    }

    /**
     * Gets max_limit
     *
     * @return string|null
     */
    public function getMaxLimit()
    {
        return $this->container['max_limit'];
    }

    /**
     * Sets max_limit
     *
     * @param string|null $max_limit The maximum amount accepted for this gateway
     *
     * @return self
     */
    public function setMaxLimit($max_limit)
    {
        
        $this->container['max_limit'] = $max_limit;

        return $this;
    }

    /**
     * Gets fee_amount
     *
     * @return float|null
     */
    public function getFeeAmount()
    {
        return $this->container['fee_amount'];
    }

    /**
     * Sets fee_amount
     *
     * @param float|null $fee_amount The gateway fee amount
     *
     * @return self
     */
    public function setFeeAmount($fee_amount)
    {
        
        $this->container['fee_amount'] = $fee_amount;

        return $this;
    }

    /**
     * Gets fee_percent
     *
     * @return float|null
     */
    public function getFeePercent()
    {
        return $this->container['fee_percent'];
    }

    /**
     * Sets fee_percent
     *
     * @param float|null $fee_percent The gateway fee percentage
     *
     * @return self
     */
    public function setFeePercent($fee_percent)
    {
        
        $this->container['fee_percent'] = $fee_percent;

        return $this;
    }

    /**
     * Gets fee_tax_name1
     *
     * @return string|null
     */
    public function getFeeTaxName1()
    {
        return $this->container['fee_tax_name1'];
    }

    /**
     * Sets fee_tax_name1
     *
     * @param string|null $fee_tax_name1 Fee tax name
     *
     * @return self
     */
    public function setFeeTaxName1($fee_tax_name1)
    {
        
        $this->container['fee_tax_name1'] = $fee_tax_name1;

        return $this;
    }

    /**
     * Gets fee_tax_name2
     *
     * @return string|null
     */
    public function getFeeTaxName2()
    {
        return $this->container['fee_tax_name2'];
    }

    /**
     * Sets fee_tax_name2
     *
     * @param string|null $fee_tax_name2 Fee tax name
     *
     * @return self
     */
    public function setFeeTaxName2($fee_tax_name2)
    {
        
        $this->container['fee_tax_name2'] = $fee_tax_name2;

        return $this;
    }

    /**
     * Gets fee_tax_name3
     *
     * @return string|null
     */
    public function getFeeTaxName3()
    {
        return $this->container['fee_tax_name3'];
    }

    /**
     * Sets fee_tax_name3
     *
     * @param string|null $fee_tax_name3 Fee tax name
     *
     * @return self
     */
    public function setFeeTaxName3($fee_tax_name3)
    {
        
        $this->container['fee_tax_name3'] = $fee_tax_name3;

        return $this;
    }

    /**
     * Gets fee_tax_rate1
     *
     * @return float|null
     */
    public function getFeeTaxRate1()
    {
        return $this->container['fee_tax_rate1'];
    }

    /**
     * Sets fee_tax_rate1
     *
     * @param float|null $fee_tax_rate1 The tax rate
     *
     * @return self
     */
    public function setFeeTaxRate1($fee_tax_rate1)
    {
        
        $this->container['fee_tax_rate1'] = $fee_tax_rate1;

        return $this;
    }

    /**
     * Gets fee_tax_rate2
     *
     * @return float|null
     */
    public function getFeeTaxRate2()
    {
        return $this->container['fee_tax_rate2'];
    }

    /**
     * Sets fee_tax_rate2
     *
     * @param float|null $fee_tax_rate2 The tax rate
     *
     * @return self
     */
    public function setFeeTaxRate2($fee_tax_rate2)
    {
        
        $this->container['fee_tax_rate2'] = $fee_tax_rate2;

        return $this;
    }

    /**
     * Gets fee_tax_rate3
     *
     * @return float|null
     */
    public function getFeeTaxRate3()
    {
        return $this->container['fee_tax_rate3'];
    }

    /**
     * Sets fee_tax_rate3
     *
     * @param float|null $fee_tax_rate3 The tax rate
     *
     * @return self
     */
    public function setFeeTaxRate3($fee_tax_rate3)
    {
        
        $this->container['fee_tax_rate3'] = $fee_tax_rate3;

        return $this;
    }

    /**
     * Gets fee_cap
     *
     * @return float|null
     */
    public function getFeeCap()
    {
        return $this->container['fee_cap'];
    }

    /**
     * Sets fee_cap
     *
     * @param float|null $fee_cap If set the fee amount will be no higher than this amount
     *
     * @return self
     */
    public function setFeeCap($fee_cap)
    {
        
        $this->container['fee_cap'] = $fee_cap;

        return $this;
    }

    /**
     * Gets adjust_fee_percent
     *
     * @return bool|null
     */
    public function getAdjustFeePercent()
    {
        return $this->container['adjust_fee_percent'];
    }

    /**
     * Sets adjust_fee_percent
     *
     * @param bool|null $adjust_fee_percent Adjusts the fee to match the exact gateway fee.
     *
     * @return self
     */
    public function setAdjustFeePercent($adjust_fee_percent)
    {
        
        $this->container['adjust_fee_percent'] = $adjust_fee_percent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


