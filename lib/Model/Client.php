<?php
/**
 * Client
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  IvkeyMinds\InvoiceNinjaClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Invoice Ninja
 *
 * Invoice Ninja. Open Source Invoicing lives here.
 *
 * The version of the OpenAPI document: 5.5.58
 * Contact: contact@invoiceninja.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace IvkeyMinds\InvoiceNinjaClient\Model;

use \ArrayAccess;
use \IvkeyMinds\InvoiceNinjaClient\ObjectSerializer;

/**
 * Client Class Doc Comment
 *
 * @category Class
 * @package  IvkeyMinds\InvoiceNinjaClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Client implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Client';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'user_id' => 'string',
        'company_id' => 'string',
        'contacts' => '\IvkeyMinds\InvoiceNinjaClient\Model\ClientContact[]',
        'name' => 'string',
        'website' => 'string',
        'private_notes' => 'string',
        'client_hash' => 'string',
        'industry_id' => 'float',
        'size_id' => 'float',
        'address1' => 'string',
        'address2' => 'string',
        'city' => 'string',
        'state' => 'string',
        'postal_code' => 'string',
        'phone' => 'string',
        'country_id' => 'float',
        'custom_value1' => 'string',
        'custom_value2' => 'string',
        'custom_value3' => 'string',
        'custom_value4' => 'string',
        'vat_number' => 'string',
        'id_number' => 'string',
        'number' => 'string',
        'shipping_address1' => 'string',
        'shipping_address2' => 'string',
        'shipping_city' => 'string',
        'shipping_state' => 'string',
        'shipping_postal_code' => 'string',
        'shipping_country_id' => 'float',
        'is_deleted' => 'bool',
        'balance' => 'float',
        'paid_to_date' => 'float',
        'credit_balance' => 'float',
        'last_login' => 'float',
        'created_at' => 'float',
        'updated_at' => 'float',
        'settings' => '\IvkeyMinds\InvoiceNinjaClient\Model\CompanySettings'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'user_id' => null,
        'company_id' => null,
        'contacts' => null,
        'name' => null,
        'website' => null,
        'private_notes' => null,
        'client_hash' => null,
        'industry_id' => null,
        'size_id' => null,
        'address1' => null,
        'address2' => null,
        'city' => null,
        'state' => null,
        'postal_code' => null,
        'phone' => null,
        'country_id' => 'integer',
        'custom_value1' => null,
        'custom_value2' => null,
        'custom_value3' => null,
        'custom_value4' => null,
        'vat_number' => null,
        'id_number' => null,
        'number' => null,
        'shipping_address1' => null,
        'shipping_address2' => null,
        'shipping_city' => null,
        'shipping_state' => null,
        'shipping_postal_code' => null,
        'shipping_country_id' => 'integer',
        'is_deleted' => null,
        'balance' => 'float',
        'paid_to_date' => 'float',
        'credit_balance' => 'float',
        'last_login' => 'integer',
        'created_at' => 'integer',
        'updated_at' => 'integer',
        'settings' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'id' => true,
        'user_id' => true,
        'company_id' => true,
        'contacts' => true,
        'name' => true,
        'website' => true,
        'private_notes' => true,
        'client_hash' => true,
        'industry_id' => true,
        'size_id' => true,
        'address1' => true,
        'address2' => true,
        'city' => true,
        'state' => true,
        'postal_code' => true,
        'phone' => true,
        'country_id' => true,
        'custom_value1' => true,
        'custom_value2' => true,
        'custom_value3' => true,
        'custom_value4' => true,
        'vat_number' => true,
        'id_number' => true,
        'number' => true,
        'shipping_address1' => true,
        'shipping_address2' => true,
        'shipping_city' => true,
        'shipping_state' => true,
        'shipping_postal_code' => true,
        'shipping_country_id' => true,
        'is_deleted' => true,
        'balance' => true,
        'paid_to_date' => true,
        'credit_balance' => true,
        'last_login' => true,
        'created_at' => true,
        'updated_at' => true,
        'settings' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'user_id' => 'user_id',
        'company_id' => 'company_id',
        'contacts' => 'contacts',
        'name' => 'name',
        'website' => 'website',
        'private_notes' => 'private_notes',
        'client_hash' => 'client_hash',
        'industry_id' => 'industry_id',
        'size_id' => 'size_id',
        'address1' => 'address1',
        'address2' => 'address2',
        'city' => 'city',
        'state' => 'state',
        'postal_code' => 'postal_code',
        'phone' => 'phone',
        'country_id' => 'country_id',
        'custom_value1' => 'custom_value1',
        'custom_value2' => 'custom_value2',
        'custom_value3' => 'custom_value3',
        'custom_value4' => 'custom_value4',
        'vat_number' => 'vat_number',
        'id_number' => 'id_number',
        'number' => 'number',
        'shipping_address1' => 'shipping_address1',
        'shipping_address2' => 'shipping_address2',
        'shipping_city' => 'shipping_city',
        'shipping_state' => 'shipping_state',
        'shipping_postal_code' => 'shipping_postal_code',
        'shipping_country_id' => 'shipping_country_id',
        'is_deleted' => 'is_deleted',
        'balance' => 'balance',
        'paid_to_date' => 'paid_to_date',
        'credit_balance' => 'credit_balance',
        'last_login' => 'last_login',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'settings' => 'settings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'user_id' => 'setUserId',
        'company_id' => 'setCompanyId',
        'contacts' => 'setContacts',
        'name' => 'setName',
        'website' => 'setWebsite',
        'private_notes' => 'setPrivateNotes',
        'client_hash' => 'setClientHash',
        'industry_id' => 'setIndustryId',
        'size_id' => 'setSizeId',
        'address1' => 'setAddress1',
        'address2' => 'setAddress2',
        'city' => 'setCity',
        'state' => 'setState',
        'postal_code' => 'setPostalCode',
        'phone' => 'setPhone',
        'country_id' => 'setCountryId',
        'custom_value1' => 'setCustomValue1',
        'custom_value2' => 'setCustomValue2',
        'custom_value3' => 'setCustomValue3',
        'custom_value4' => 'setCustomValue4',
        'vat_number' => 'setVatNumber',
        'id_number' => 'setIdNumber',
        'number' => 'setNumber',
        'shipping_address1' => 'setShippingAddress1',
        'shipping_address2' => 'setShippingAddress2',
        'shipping_city' => 'setShippingCity',
        'shipping_state' => 'setShippingState',
        'shipping_postal_code' => 'setShippingPostalCode',
        'shipping_country_id' => 'setShippingCountryId',
        'is_deleted' => 'setIsDeleted',
        'balance' => 'setBalance',
        'paid_to_date' => 'setPaidToDate',
        'credit_balance' => 'setCreditBalance',
        'last_login' => 'setLastLogin',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'settings' => 'setSettings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'user_id' => 'getUserId',
        'company_id' => 'getCompanyId',
        'contacts' => 'getContacts',
        'name' => 'getName',
        'website' => 'getWebsite',
        'private_notes' => 'getPrivateNotes',
        'client_hash' => 'getClientHash',
        'industry_id' => 'getIndustryId',
        'size_id' => 'getSizeId',
        'address1' => 'getAddress1',
        'address2' => 'getAddress2',
        'city' => 'getCity',
        'state' => 'getState',
        'postal_code' => 'getPostalCode',
        'phone' => 'getPhone',
        'country_id' => 'getCountryId',
        'custom_value1' => 'getCustomValue1',
        'custom_value2' => 'getCustomValue2',
        'custom_value3' => 'getCustomValue3',
        'custom_value4' => 'getCustomValue4',
        'vat_number' => 'getVatNumber',
        'id_number' => 'getIdNumber',
        'number' => 'getNumber',
        'shipping_address1' => 'getShippingAddress1',
        'shipping_address2' => 'getShippingAddress2',
        'shipping_city' => 'getShippingCity',
        'shipping_state' => 'getShippingState',
        'shipping_postal_code' => 'getShippingPostalCode',
        'shipping_country_id' => 'getShippingCountryId',
        'is_deleted' => 'getIsDeleted',
        'balance' => 'getBalance',
        'paid_to_date' => 'getPaidToDate',
        'credit_balance' => 'getCreditBalance',
        'last_login' => 'getLastLogin',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'settings' => 'getSettings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('company_id', $data ?? [], null);
        $this->setIfExists('contacts', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('website', $data ?? [], null);
        $this->setIfExists('private_notes', $data ?? [], null);
        $this->setIfExists('client_hash', $data ?? [], null);
        $this->setIfExists('industry_id', $data ?? [], null);
        $this->setIfExists('size_id', $data ?? [], null);
        $this->setIfExists('address1', $data ?? [], null);
        $this->setIfExists('address2', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('postal_code', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('country_id', $data ?? [], null);
        $this->setIfExists('custom_value1', $data ?? [], null);
        $this->setIfExists('custom_value2', $data ?? [], null);
        $this->setIfExists('custom_value3', $data ?? [], null);
        $this->setIfExists('custom_value4', $data ?? [], null);
        $this->setIfExists('vat_number', $data ?? [], null);
        $this->setIfExists('id_number', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('shipping_address1', $data ?? [], null);
        $this->setIfExists('shipping_address2', $data ?? [], null);
        $this->setIfExists('shipping_city', $data ?? [], null);
        $this->setIfExists('shipping_state', $data ?? [], null);
        $this->setIfExists('shipping_postal_code', $data ?? [], null);
        $this->setIfExists('shipping_country_id', $data ?? [], null);
        $this->setIfExists('is_deleted', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('paid_to_date', $data ?? [], null);
        $this->setIfExists('credit_balance', $data ?? [], null);
        $this->setIfExists('last_login', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('settings', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The hashed id of the client
     *
     * @return self
     */
    public function setId($id)
    {
        
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id The hashed id of the user
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return string|null
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param string|null $company_id The hashed id of the company
     *
     * @return self
     */
    public function setCompanyId($company_id)
    {
        
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets contacts
     *
     * @return \IvkeyMinds\InvoiceNinjaClient\Model\ClientContact[]|null
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param \IvkeyMinds\InvoiceNinjaClient\Model\ClientContact[]|null $contacts contacts
     *
     * @return self
     */
    public function setContacts($contacts)
    {
        
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The client name
     *
     * @return self
     */
    public function setName($name)
    {
        
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string|null
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string|null $website The client website
     *
     * @return self
     */
    public function setWebsite($website)
    {
        
        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets private_notes
     *
     * @return string|null
     */
    public function getPrivateNotes()
    {
        return $this->container['private_notes'];
    }

    /**
     * Sets private_notes
     *
     * @param string|null $private_notes Private notes on the client
     *
     * @return self
     */
    public function setPrivateNotes($private_notes)
    {
        
        $this->container['private_notes'] = $private_notes;

        return $this;
    }

    /**
     * Gets client_hash
     *
     * @return string|null
     */
    public function getClientHash()
    {
        return $this->container['client_hash'];
    }

    /**
     * Sets client_hash
     *
     * @param string|null $client_hash The client hash
     *
     * @return self
     */
    public function setClientHash($client_hash)
    {
        
        $this->container['client_hash'] = $client_hash;

        return $this;
    }

    /**
     * Gets industry_id
     *
     * @return float|null
     */
    public function getIndustryId()
    {
        return $this->container['industry_id'];
    }

    /**
     * Sets industry_id
     *
     * @param float|null $industry_id The industry id of the client
     *
     * @return self
     */
    public function setIndustryId($industry_id)
    {
        
        $this->container['industry_id'] = $industry_id;

        return $this;
    }

    /**
     * Gets size_id
     *
     * @return float|null
     */
    public function getSizeId()
    {
        return $this->container['size_id'];
    }

    /**
     * Sets size_id
     *
     * @param float|null $size_id The size id of the client
     *
     * @return self
     */
    public function setSizeId($size_id)
    {
        
        $this->container['size_id'] = $size_id;

        return $this;
    }

    /**
     * Gets address1
     *
     * @return string|null
     */
    public function getAddress1()
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     *
     * @param string|null $address1 Address line 1
     *
     * @return self
     */
    public function setAddress1($address1)
    {
        
        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string|null
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string|null $address2 Address line 2
     *
     * @return self
     */
    public function setAddress2($address2)
    {
        
        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city City
     *
     * @return self
     */
    public function setCity($city)
    {
        
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state State/Locality
     *
     * @return self
     */
    public function setState($state)
    {
        
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code Zip / Postal code
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone The client phone number
     *
     * @return self
     */
    public function setPhone($phone)
    {
        
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets country_id
     *
     * @return float|null
     */
    public function getCountryId()
    {
        return $this->container['country_id'];
    }

    /**
     * Sets country_id
     *
     * @param float|null $country_id The client country id
     *
     * @return self
     */
    public function setCountryId($country_id)
    {
        
        $this->container['country_id'] = $country_id;

        return $this;
    }

    /**
     * Gets custom_value1
     *
     * @return string|null
     */
    public function getCustomValue1()
    {
        return $this->container['custom_value1'];
    }

    /**
     * Sets custom_value1
     *
     * @param string|null $custom_value1 A custom value
     *
     * @return self
     */
    public function setCustomValue1($custom_value1)
    {
        
        $this->container['custom_value1'] = $custom_value1;

        return $this;
    }

    /**
     * Gets custom_value2
     *
     * @return string|null
     */
    public function getCustomValue2()
    {
        return $this->container['custom_value2'];
    }

    /**
     * Sets custom_value2
     *
     * @param string|null $custom_value2 A custom value
     *
     * @return self
     */
    public function setCustomValue2($custom_value2)
    {
        
        $this->container['custom_value2'] = $custom_value2;

        return $this;
    }

    /**
     * Gets custom_value3
     *
     * @return string|null
     */
    public function getCustomValue3()
    {
        return $this->container['custom_value3'];
    }

    /**
     * Sets custom_value3
     *
     * @param string|null $custom_value3 A custom value
     *
     * @return self
     */
    public function setCustomValue3($custom_value3)
    {
        
        $this->container['custom_value3'] = $custom_value3;

        return $this;
    }

    /**
     * Gets custom_value4
     *
     * @return string|null
     */
    public function getCustomValue4()
    {
        return $this->container['custom_value4'];
    }

    /**
     * Sets custom_value4
     *
     * @param string|null $custom_value4 A custom value
     *
     * @return self
     */
    public function setCustomValue4($custom_value4)
    {
        
        $this->container['custom_value4'] = $custom_value4;

        return $this;
    }

    /**
     * Gets vat_number
     *
     * @return string|null
     */
    public function getVatNumber()
    {
        return $this->container['vat_number'];
    }

    /**
     * Sets vat_number
     *
     * @param string|null $vat_number The client VAT number
     *
     * @return self
     */
    public function setVatNumber($vat_number)
    {
        
        $this->container['vat_number'] = $vat_number;

        return $this;
    }

    /**
     * Gets id_number
     *
     * @return string|null
     */
    public function getIdNumber()
    {
        return $this->container['id_number'];
    }

    /**
     * Sets id_number
     *
     * @param string|null $id_number The client id number
     *
     * @return self
     */
    public function setIdNumber($id_number)
    {
        
        $this->container['id_number'] = $id_number;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number The client number - assigned by the system typically
     *
     * @return self
     */
    public function setNumber($number)
    {
        
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets shipping_address1
     *
     * @return string|null
     */
    public function getShippingAddress1()
    {
        return $this->container['shipping_address1'];
    }

    /**
     * Sets shipping_address1
     *
     * @param string|null $shipping_address1 The shipping address line 1
     *
     * @return self
     */
    public function setShippingAddress1($shipping_address1)
    {
        
        $this->container['shipping_address1'] = $shipping_address1;

        return $this;
    }

    /**
     * Gets shipping_address2
     *
     * @return string|null
     */
    public function getShippingAddress2()
    {
        return $this->container['shipping_address2'];
    }

    /**
     * Sets shipping_address2
     *
     * @param string|null $shipping_address2 The shipping address line 2
     *
     * @return self
     */
    public function setShippingAddress2($shipping_address2)
    {
        
        $this->container['shipping_address2'] = $shipping_address2;

        return $this;
    }

    /**
     * Gets shipping_city
     *
     * @return string|null
     */
    public function getShippingCity()
    {
        return $this->container['shipping_city'];
    }

    /**
     * Sets shipping_city
     *
     * @param string|null $shipping_city The shipping city
     *
     * @return self
     */
    public function setShippingCity($shipping_city)
    {
        
        $this->container['shipping_city'] = $shipping_city;

        return $this;
    }

    /**
     * Gets shipping_state
     *
     * @return string|null
     */
    public function getShippingState()
    {
        return $this->container['shipping_state'];
    }

    /**
     * Sets shipping_state
     *
     * @param string|null $shipping_state The shipping state
     *
     * @return self
     */
    public function setShippingState($shipping_state)
    {
        
        $this->container['shipping_state'] = $shipping_state;

        return $this;
    }

    /**
     * Gets shipping_postal_code
     *
     * @return string|null
     */
    public function getShippingPostalCode()
    {
        return $this->container['shipping_postal_code'];
    }

    /**
     * Sets shipping_postal_code
     *
     * @param string|null $shipping_postal_code The shipping postal code
     *
     * @return self
     */
    public function setShippingPostalCode($shipping_postal_code)
    {
        
        $this->container['shipping_postal_code'] = $shipping_postal_code;

        return $this;
    }

    /**
     * Gets shipping_country_id
     *
     * @return float|null
     */
    public function getShippingCountryId()
    {
        return $this->container['shipping_country_id'];
    }

    /**
     * Sets shipping_country_id
     *
     * @param float|null $shipping_country_id The shipping country id
     *
     * @return self
     */
    public function setShippingCountryId($shipping_country_id)
    {
        
        $this->container['shipping_country_id'] = $shipping_country_id;

        return $this;
    }

    /**
     * Gets is_deleted
     *
     * @return bool|null
     */
    public function getIsDeleted()
    {
        return $this->container['is_deleted'];
    }

    /**
     * Sets is_deleted
     *
     * @param bool|null $is_deleted Boolean flagged determining if the client has been deleted
     *
     * @return self
     */
    public function setIsDeleted($is_deleted)
    {
        
        $this->container['is_deleted'] = $is_deleted;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return float|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param float|null $balance The client balance
     *
     * @return self
     */
    public function setBalance($balance)
    {
        
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets paid_to_date
     *
     * @return float|null
     */
    public function getPaidToDate()
    {
        return $this->container['paid_to_date'];
    }

    /**
     * Sets paid_to_date
     *
     * @param float|null $paid_to_date The amount the client has paid to date.
     *
     * @return self
     */
    public function setPaidToDate($paid_to_date)
    {
        
        $this->container['paid_to_date'] = $paid_to_date;

        return $this;
    }

    /**
     * Gets credit_balance
     *
     * @return float|null
     */
    public function getCreditBalance()
    {
        return $this->container['credit_balance'];
    }

    /**
     * Sets credit_balance
     *
     * @param float|null $credit_balance An amount which is available to the client for future use.
     *
     * @return self
     */
    public function setCreditBalance($credit_balance)
    {
        
        $this->container['credit_balance'] = $credit_balance;

        return $this;
    }

    /**
     * Gets last_login
     *
     * @return float|null
     */
    public function getLastLogin()
    {
        return $this->container['last_login'];
    }

    /**
     * Sets last_login
     *
     * @param float|null $last_login Timestamp
     *
     * @return self
     */
    public function setLastLogin($last_login)
    {
        
        $this->container['last_login'] = $last_login;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return float|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param float|null $created_at Timestamp
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return float|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param float|null $updated_at Timestamp
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets settings
     *
     * @return \IvkeyMinds\InvoiceNinjaClient\Model\CompanySettings|null
     */
    public function getSettings()
    {
        return $this->container['settings'];
    }

    /**
     * Sets settings
     *
     * @param \IvkeyMinds\InvoiceNinjaClient\Model\CompanySettings|null $settings settings
     *
     * @return self
     */
    public function setSettings($settings)
    {
        
        $this->container['settings'] = $settings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


