<?php
/**
 * CompanySettings
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  IvkeyMinds\InvoiceNinjaClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Invoice Ninja
 *
 * Invoice Ninja. Open Source Invoicing lives here.
 *
 * The version of the OpenAPI document: 5.5.58
 * Contact: contact@invoiceninja.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace IvkeyMinds\InvoiceNinjaClient\Model;

use \ArrayAccess;
use \IvkeyMinds\InvoiceNinjaClient\ObjectSerializer;

/**
 * CompanySettings Class Doc Comment
 *
 * @category Class
 * @package  IvkeyMinds\InvoiceNinjaClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CompanySettings implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CompanySettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'timezone_id' => 'string',
        'date_format_id' => 'string',
        'military_time' => 'bool',
        'language_id' => 'string',
        'show_currency_code' => 'bool',
        'currency_id' => 'string',
        'payment_terms' => 'int',
        'company_gateway_ids' => 'string',
        'custom_value1' => 'string',
        'custom_value2' => 'string',
        'custom_value3' => 'string',
        'custom_value4' => 'string',
        'default_task_rate' => 'float',
        'send_reminders' => 'bool',
        'enable_client_portal_tasks' => 'bool',
        'email_style' => 'string',
        'reply_to_email' => 'string',
        'bcc_email' => 'string',
        'pdf_email_attachment' => 'bool',
        'ubl_email_attachment' => 'bool',
        'email_style_custom' => 'string',
        'counter_number_applied' => 'string',
        'quote_number_applied' => 'string',
        'custom_message_dashboard' => 'string',
        'custom_message_unpaid_invoice' => 'string',
        'custom_message_paid_invoice' => 'string',
        'custom_message_unapproved_quote' => 'string',
        'lock_invoices' => 'bool',
        'auto_archive_invoice' => 'bool',
        'auto_archive_quote' => 'bool',
        'auto_convert_quote' => 'bool',
        'inclusive_taxes' => 'bool',
        'translations' => 'object',
        'task_number_pattern' => 'string',
        'task_number_counter' => 'int',
        'reminder_send_time' => 'int',
        'expense_number_pattern' => 'string',
        'expense_number_counter' => 'int',
        'vendor_number_pattern' => 'string',
        'vendor_number_counter' => 'int',
        'ticket_number_pattern' => 'string',
        'ticket_number_counter' => 'int',
        'payment_number_pattern' => 'string',
        'payment_number_counter' => 'int',
        'invoice_number_pattern' => 'string',
        'invoice_number_counter' => 'int',
        'quote_number_pattern' => 'string',
        'quote_number_counter' => 'int',
        'client_number_pattern' => 'string',
        'client_number_counter' => 'int',
        'credit_number_pattern' => 'string',
        'credit_number_counter' => 'int',
        'recurring_invoice_number_prefix' => 'string',
        'reset_counter_frequency_id' => 'int',
        'reset_counter_date' => 'string',
        'counter_padding' => 'int',
        'shared_invoice_quote_counter' => 'bool',
        'update_products' => 'bool',
        'convert_products' => 'bool',
        'fill_products' => 'bool',
        'invoice_terms' => 'string',
        'quote_terms' => 'string',
        'invoice_taxes' => 'float',
        'invoice_design_id' => 'string',
        'quote_design_id' => 'string',
        'invoice_footer' => 'string',
        'invoice_labels' => 'string',
        'tax_rate1' => 'float',
        'tax_name1' => 'string',
        'tax_rate2' => 'float',
        'tax_name2' => 'string',
        'tax_rate3' => 'float',
        'tax_name3' => 'string',
        'payment_type_id' => 'string',
        'custom_fields' => 'string',
        'email_footer' => 'string',
        'email_sending_method' => 'string',
        'gmail_sending_user_id' => 'string',
        'email_subject_invoice' => 'string',
        'email_subject_quote' => 'string',
        'email_subject_payment' => 'string',
        'email_template_invoice' => 'string',
        'email_template_quote' => 'string',
        'email_template_payment' => 'string',
        'email_subject_reminder1' => 'string',
        'email_subject_reminder2' => 'string',
        'email_subject_reminder3' => 'string',
        'email_subject_reminder_endless' => 'string',
        'email_template_reminder1' => 'string',
        'email_template_reminder2' => 'string',
        'email_template_reminder3' => 'string',
        'email_template_reminder_endless' => 'string',
        'enable_portal_password' => 'bool',
        'show_accept_invoice_terms' => 'bool',
        'show_accept_quote_terms' => 'bool',
        'require_invoice_signature' => 'bool',
        'require_quote_signature' => 'bool',
        'name' => 'string',
        'company_logo' => 'object',
        'website' => 'string',
        'address1' => 'string',
        'address2' => 'string',
        'city' => 'string',
        'state' => 'string',
        'postal_code' => 'string',
        'phone' => 'string',
        'email' => 'string',
        'country_id' => 'string',
        'vat_number' => 'string',
        'page_size' => 'string',
        'font_size' => 'float',
        'primary_font' => 'string',
        'secondary_font' => 'string',
        'hide_paid_to_date' => 'bool',
        'embed_documents' => 'bool',
        'all_pages_header' => 'bool',
        'all_pages_footer' => 'bool',
        'document_email_attachment' => 'bool',
        'enable_client_portal_password' => 'bool',
        'enable_email_markup' => 'bool',
        'enable_client_portal_dashboard' => 'bool',
        'enable_client_portal' => 'bool',
        'email_template_statement' => 'string',
        'email_subject_statement' => 'string',
        'signature_on_pdf' => 'bool',
        'quote_footer' => 'string',
        'email_subject_custom1' => 'string',
        'email_subject_custom2' => 'string',
        'email_subject_custom3' => 'string',
        'email_template_custom1' => 'string',
        'email_template_custom2' => 'string',
        'email_template_custom3' => 'string',
        'enable_reminder1' => 'bool',
        'enable_reminder2' => 'bool',
        'enable_reminder3' => 'bool',
        'num_days_reminder1' => 'float',
        'num_days_reminder2' => 'float',
        'num_days_reminder3' => 'float',
        'schedule_reminder1' => 'string',
        'schedule_reminder2' => 'string',
        'schedule_reminder3' => 'string',
        'late_fee_amount1' => 'float',
        'late_fee_amount2' => 'float',
        'late_fee_amount3' => 'float',
        'endless_reminder_frequency_id' => 'string',
        'client_online_payment_notification' => 'bool',
        'client_manual_payment_notification' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'timezone_id' => null,
        'date_format_id' => null,
        'military_time' => null,
        'language_id' => null,
        'show_currency_code' => null,
        'currency_id' => null,
        'payment_terms' => null,
        'company_gateway_ids' => null,
        'custom_value1' => null,
        'custom_value2' => null,
        'custom_value3' => null,
        'custom_value4' => null,
        'default_task_rate' => 'float',
        'send_reminders' => null,
        'enable_client_portal_tasks' => null,
        'email_style' => null,
        'reply_to_email' => null,
        'bcc_email' => null,
        'pdf_email_attachment' => null,
        'ubl_email_attachment' => null,
        'email_style_custom' => null,
        'counter_number_applied' => null,
        'quote_number_applied' => null,
        'custom_message_dashboard' => null,
        'custom_message_unpaid_invoice' => null,
        'custom_message_paid_invoice' => null,
        'custom_message_unapproved_quote' => null,
        'lock_invoices' => null,
        'auto_archive_invoice' => null,
        'auto_archive_quote' => null,
        'auto_convert_quote' => null,
        'inclusive_taxes' => null,
        'translations' => null,
        'task_number_pattern' => null,
        'task_number_counter' => null,
        'reminder_send_time' => null,
        'expense_number_pattern' => null,
        'expense_number_counter' => null,
        'vendor_number_pattern' => null,
        'vendor_number_counter' => null,
        'ticket_number_pattern' => null,
        'ticket_number_counter' => null,
        'payment_number_pattern' => null,
        'payment_number_counter' => null,
        'invoice_number_pattern' => null,
        'invoice_number_counter' => null,
        'quote_number_pattern' => null,
        'quote_number_counter' => null,
        'client_number_pattern' => null,
        'client_number_counter' => null,
        'credit_number_pattern' => null,
        'credit_number_counter' => null,
        'recurring_invoice_number_prefix' => null,
        'reset_counter_frequency_id' => null,
        'reset_counter_date' => null,
        'counter_padding' => null,
        'shared_invoice_quote_counter' => null,
        'update_products' => null,
        'convert_products' => null,
        'fill_products' => null,
        'invoice_terms' => null,
        'quote_terms' => null,
        'invoice_taxes' => null,
        'invoice_design_id' => null,
        'quote_design_id' => null,
        'invoice_footer' => null,
        'invoice_labels' => null,
        'tax_rate1' => null,
        'tax_name1' => null,
        'tax_rate2' => null,
        'tax_name2' => null,
        'tax_rate3' => null,
        'tax_name3' => null,
        'payment_type_id' => null,
        'custom_fields' => null,
        'email_footer' => null,
        'email_sending_method' => null,
        'gmail_sending_user_id' => null,
        'email_subject_invoice' => null,
        'email_subject_quote' => null,
        'email_subject_payment' => null,
        'email_template_invoice' => null,
        'email_template_quote' => null,
        'email_template_payment' => null,
        'email_subject_reminder1' => null,
        'email_subject_reminder2' => null,
        'email_subject_reminder3' => null,
        'email_subject_reminder_endless' => null,
        'email_template_reminder1' => null,
        'email_template_reminder2' => null,
        'email_template_reminder3' => null,
        'email_template_reminder_endless' => null,
        'enable_portal_password' => null,
        'show_accept_invoice_terms' => null,
        'show_accept_quote_terms' => null,
        'require_invoice_signature' => null,
        'require_quote_signature' => null,
        'name' => null,
        'company_logo' => null,
        'website' => null,
        'address1' => null,
        'address2' => null,
        'city' => null,
        'state' => null,
        'postal_code' => null,
        'phone' => null,
        'email' => null,
        'country_id' => null,
        'vat_number' => null,
        'page_size' => null,
        'font_size' => null,
        'primary_font' => null,
        'secondary_font' => null,
        'hide_paid_to_date' => null,
        'embed_documents' => null,
        'all_pages_header' => null,
        'all_pages_footer' => null,
        'document_email_attachment' => null,
        'enable_client_portal_password' => null,
        'enable_email_markup' => null,
        'enable_client_portal_dashboard' => null,
        'enable_client_portal' => null,
        'email_template_statement' => null,
        'email_subject_statement' => null,
        'signature_on_pdf' => null,
        'quote_footer' => null,
        'email_subject_custom1' => null,
        'email_subject_custom2' => null,
        'email_subject_custom3' => null,
        'email_template_custom1' => null,
        'email_template_custom2' => null,
        'email_template_custom3' => null,
        'enable_reminder1' => null,
        'enable_reminder2' => null,
        'enable_reminder3' => null,
        'num_days_reminder1' => null,
        'num_days_reminder2' => null,
        'num_days_reminder3' => null,
        'schedule_reminder1' => null,
        'schedule_reminder2' => null,
        'schedule_reminder3' => null,
        'late_fee_amount1' => null,
        'late_fee_amount2' => null,
        'late_fee_amount3' => null,
        'endless_reminder_frequency_id' => null,
        'client_online_payment_notification' => null,
        'client_manual_payment_notification' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'timezone_id' => true,
        'date_format_id' => true,
        'military_time' => true,
        'language_id' => true,
        'show_currency_code' => true,
        'currency_id' => true,
        'payment_terms' => true,
        'company_gateway_ids' => true,
        'custom_value1' => true,
        'custom_value2' => true,
        'custom_value3' => true,
        'custom_value4' => true,
        'default_task_rate' => true,
        'send_reminders' => true,
        'enable_client_portal_tasks' => true,
        'email_style' => true,
        'reply_to_email' => true,
        'bcc_email' => true,
        'pdf_email_attachment' => true,
        'ubl_email_attachment' => true,
        'email_style_custom' => true,
        'counter_number_applied' => true,
        'quote_number_applied' => true,
        'custom_message_dashboard' => true,
        'custom_message_unpaid_invoice' => true,
        'custom_message_paid_invoice' => true,
        'custom_message_unapproved_quote' => true,
        'lock_invoices' => true,
        'auto_archive_invoice' => true,
        'auto_archive_quote' => true,
        'auto_convert_quote' => true,
        'inclusive_taxes' => true,
        'translations' => true,
        'task_number_pattern' => true,
        'task_number_counter' => true,
        'reminder_send_time' => true,
        'expense_number_pattern' => true,
        'expense_number_counter' => true,
        'vendor_number_pattern' => true,
        'vendor_number_counter' => true,
        'ticket_number_pattern' => true,
        'ticket_number_counter' => true,
        'payment_number_pattern' => true,
        'payment_number_counter' => true,
        'invoice_number_pattern' => true,
        'invoice_number_counter' => true,
        'quote_number_pattern' => true,
        'quote_number_counter' => true,
        'client_number_pattern' => true,
        'client_number_counter' => true,
        'credit_number_pattern' => true,
        'credit_number_counter' => true,
        'recurring_invoice_number_prefix' => true,
        'reset_counter_frequency_id' => true,
        'reset_counter_date' => true,
        'counter_padding' => true,
        'shared_invoice_quote_counter' => true,
        'update_products' => true,
        'convert_products' => true,
        'fill_products' => true,
        'invoice_terms' => true,
        'quote_terms' => true,
        'invoice_taxes' => true,
        'invoice_design_id' => true,
        'quote_design_id' => true,
        'invoice_footer' => true,
        'invoice_labels' => true,
        'tax_rate1' => true,
        'tax_name1' => true,
        'tax_rate2' => true,
        'tax_name2' => true,
        'tax_rate3' => true,
        'tax_name3' => true,
        'payment_type_id' => true,
        'custom_fields' => true,
        'email_footer' => true,
        'email_sending_method' => true,
        'gmail_sending_user_id' => true,
        'email_subject_invoice' => true,
        'email_subject_quote' => true,
        'email_subject_payment' => true,
        'email_template_invoice' => true,
        'email_template_quote' => true,
        'email_template_payment' => true,
        'email_subject_reminder1' => true,
        'email_subject_reminder2' => true,
        'email_subject_reminder3' => true,
        'email_subject_reminder_endless' => true,
        'email_template_reminder1' => true,
        'email_template_reminder2' => true,
        'email_template_reminder3' => true,
        'email_template_reminder_endless' => true,
        'enable_portal_password' => true,
        'show_accept_invoice_terms' => true,
        'show_accept_quote_terms' => true,
        'require_invoice_signature' => true,
        'require_quote_signature' => true,
        'name' => true,
        'company_logo' => true,
        'website' => true,
        'address1' => true,
        'address2' => true,
        'city' => true,
        'state' => true,
        'postal_code' => true,
        'phone' => true,
        'email' => true,
        'country_id' => true,
        'vat_number' => true,
        'page_size' => true,
        'font_size' => true,
        'primary_font' => true,
        'secondary_font' => true,
        'hide_paid_to_date' => true,
        'embed_documents' => true,
        'all_pages_header' => true,
        'all_pages_footer' => true,
        'document_email_attachment' => true,
        'enable_client_portal_password' => true,
        'enable_email_markup' => true,
        'enable_client_portal_dashboard' => true,
        'enable_client_portal' => true,
        'email_template_statement' => true,
        'email_subject_statement' => true,
        'signature_on_pdf' => true,
        'quote_footer' => true,
        'email_subject_custom1' => true,
        'email_subject_custom2' => true,
        'email_subject_custom3' => true,
        'email_template_custom1' => true,
        'email_template_custom2' => true,
        'email_template_custom3' => true,
        'enable_reminder1' => true,
        'enable_reminder2' => true,
        'enable_reminder3' => true,
        'num_days_reminder1' => true,
        'num_days_reminder2' => true,
        'num_days_reminder3' => true,
        'schedule_reminder1' => true,
        'schedule_reminder2' => true,
        'schedule_reminder3' => true,
        'late_fee_amount1' => true,
        'late_fee_amount2' => true,
        'late_fee_amount3' => true,
        'endless_reminder_frequency_id' => true,
        'client_online_payment_notification' => true,
        'client_manual_payment_notification' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'timezone_id' => 'timezone_id',
        'date_format_id' => 'date_format_id',
        'military_time' => 'military_time',
        'language_id' => 'language_id',
        'show_currency_code' => 'show_currency_code',
        'currency_id' => 'currency_id',
        'payment_terms' => 'payment_terms',
        'company_gateway_ids' => 'company_gateway_ids',
        'custom_value1' => 'custom_value1',
        'custom_value2' => 'custom_value2',
        'custom_value3' => 'custom_value3',
        'custom_value4' => 'custom_value4',
        'default_task_rate' => 'default_task_rate',
        'send_reminders' => 'send_reminders',
        'enable_client_portal_tasks' => 'enable_client_portal_tasks',
        'email_style' => 'email_style',
        'reply_to_email' => 'reply_to_email',
        'bcc_email' => 'bcc_email',
        'pdf_email_attachment' => 'pdf_email_attachment',
        'ubl_email_attachment' => 'ubl_email_attachment',
        'email_style_custom' => 'email_style_custom',
        'counter_number_applied' => 'counter_number_applied',
        'quote_number_applied' => 'quote_number_applied',
        'custom_message_dashboard' => 'custom_message_dashboard',
        'custom_message_unpaid_invoice' => 'custom_message_unpaid_invoice',
        'custom_message_paid_invoice' => 'custom_message_paid_invoice',
        'custom_message_unapproved_quote' => 'custom_message_unapproved_quote',
        'lock_invoices' => 'lock_invoices',
        'auto_archive_invoice' => 'auto_archive_invoice',
        'auto_archive_quote' => 'auto_archive_quote',
        'auto_convert_quote' => 'auto_convert_quote',
        'inclusive_taxes' => 'inclusive_taxes',
        'translations' => 'translations',
        'task_number_pattern' => 'task_number_pattern',
        'task_number_counter' => 'task_number_counter',
        'reminder_send_time' => 'reminder_send_time',
        'expense_number_pattern' => 'expense_number_pattern',
        'expense_number_counter' => 'expense_number_counter',
        'vendor_number_pattern' => 'vendor_number_pattern',
        'vendor_number_counter' => 'vendor_number_counter',
        'ticket_number_pattern' => 'ticket_number_pattern',
        'ticket_number_counter' => 'ticket_number_counter',
        'payment_number_pattern' => 'payment_number_pattern',
        'payment_number_counter' => 'payment_number_counter',
        'invoice_number_pattern' => 'invoice_number_pattern',
        'invoice_number_counter' => 'invoice_number_counter',
        'quote_number_pattern' => 'quote_number_pattern',
        'quote_number_counter' => 'quote_number_counter',
        'client_number_pattern' => 'client_number_pattern',
        'client_number_counter' => 'client_number_counter',
        'credit_number_pattern' => 'credit_number_pattern',
        'credit_number_counter' => 'credit_number_counter',
        'recurring_invoice_number_prefix' => 'recurring_invoice_number_prefix',
        'reset_counter_frequency_id' => 'reset_counter_frequency_id',
        'reset_counter_date' => 'reset_counter_date',
        'counter_padding' => 'counter_padding',
        'shared_invoice_quote_counter' => 'shared_invoice_quote_counter',
        'update_products' => 'update_products',
        'convert_products' => 'convert_products',
        'fill_products' => 'fill_products',
        'invoice_terms' => 'invoice_terms',
        'quote_terms' => 'quote_terms',
        'invoice_taxes' => 'invoice_taxes',
        'invoice_design_id' => 'invoice_design_id',
        'quote_design_id' => 'quote_design_id',
        'invoice_footer' => 'invoice_footer',
        'invoice_labels' => 'invoice_labels',
        'tax_rate1' => 'tax_rate1',
        'tax_name1' => 'tax_name1',
        'tax_rate2' => 'tax_rate2',
        'tax_name2' => 'tax_name2',
        'tax_rate3' => 'tax_rate3',
        'tax_name3' => 'tax_name3',
        'payment_type_id' => 'payment_type_id',
        'custom_fields' => 'custom_fields',
        'email_footer' => 'email_footer',
        'email_sending_method' => 'email_sending_method',
        'gmail_sending_user_id' => 'gmail_sending_user_id',
        'email_subject_invoice' => 'email_subject_invoice',
        'email_subject_quote' => 'email_subject_quote',
        'email_subject_payment' => 'email_subject_payment',
        'email_template_invoice' => 'email_template_invoice',
        'email_template_quote' => 'email_template_quote',
        'email_template_payment' => 'email_template_payment',
        'email_subject_reminder1' => 'email_subject_reminder1',
        'email_subject_reminder2' => 'email_subject_reminder2',
        'email_subject_reminder3' => 'email_subject_reminder3',
        'email_subject_reminder_endless' => 'email_subject_reminder_endless',
        'email_template_reminder1' => 'email_template_reminder1',
        'email_template_reminder2' => 'email_template_reminder2',
        'email_template_reminder3' => 'email_template_reminder3',
        'email_template_reminder_endless' => 'email_template_reminder_endless',
        'enable_portal_password' => 'enable_portal_password',
        'show_accept_invoice_terms' => 'show_accept_invoice_terms',
        'show_accept_quote_terms' => 'show_accept_quote_terms',
        'require_invoice_signature' => 'require_invoice_signature',
        'require_quote_signature' => 'require_quote_signature',
        'name' => 'name',
        'company_logo' => 'company_logo',
        'website' => 'website',
        'address1' => 'address1',
        'address2' => 'address2',
        'city' => 'city',
        'state' => 'state',
        'postal_code' => 'postal_code',
        'phone' => 'phone',
        'email' => 'email',
        'country_id' => 'country_id',
        'vat_number' => 'vat_number',
        'page_size' => 'page_size',
        'font_size' => 'font_size',
        'primary_font' => 'primary_font',
        'secondary_font' => 'secondary_font',
        'hide_paid_to_date' => 'hide_paid_to_date',
        'embed_documents' => 'embed_documents',
        'all_pages_header' => 'all_pages_header',
        'all_pages_footer' => 'all_pages_footer',
        'document_email_attachment' => 'document_email_attachment',
        'enable_client_portal_password' => 'enable_client_portal_password',
        'enable_email_markup' => 'enable_email_markup',
        'enable_client_portal_dashboard' => 'enable_client_portal_dashboard',
        'enable_client_portal' => 'enable_client_portal',
        'email_template_statement' => 'email_template_statement',
        'email_subject_statement' => 'email_subject_statement',
        'signature_on_pdf' => 'signature_on_pdf',
        'quote_footer' => 'quote_footer',
        'email_subject_custom1' => 'email_subject_custom1',
        'email_subject_custom2' => 'email_subject_custom2',
        'email_subject_custom3' => 'email_subject_custom3',
        'email_template_custom1' => 'email_template_custom1',
        'email_template_custom2' => 'email_template_custom2',
        'email_template_custom3' => 'email_template_custom3',
        'enable_reminder1' => 'enable_reminder1',
        'enable_reminder2' => 'enable_reminder2',
        'enable_reminder3' => 'enable_reminder3',
        'num_days_reminder1' => 'num_days_reminder1',
        'num_days_reminder2' => 'num_days_reminder2',
        'num_days_reminder3' => 'num_days_reminder3',
        'schedule_reminder1' => 'schedule_reminder1',
        'schedule_reminder2' => 'schedule_reminder2',
        'schedule_reminder3' => 'schedule_reminder3',
        'late_fee_amount1' => 'late_fee_amount1',
        'late_fee_amount2' => 'late_fee_amount2',
        'late_fee_amount3' => 'late_fee_amount3',
        'endless_reminder_frequency_id' => 'endless_reminder_frequency_id',
        'client_online_payment_notification' => 'client_online_payment_notification',
        'client_manual_payment_notification' => 'client_manual_payment_notification'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'timezone_id' => 'setTimezoneId',
        'date_format_id' => 'setDateFormatId',
        'military_time' => 'setMilitaryTime',
        'language_id' => 'setLanguageId',
        'show_currency_code' => 'setShowCurrencyCode',
        'currency_id' => 'setCurrencyId',
        'payment_terms' => 'setPaymentTerms',
        'company_gateway_ids' => 'setCompanyGatewayIds',
        'custom_value1' => 'setCustomValue1',
        'custom_value2' => 'setCustomValue2',
        'custom_value3' => 'setCustomValue3',
        'custom_value4' => 'setCustomValue4',
        'default_task_rate' => 'setDefaultTaskRate',
        'send_reminders' => 'setSendReminders',
        'enable_client_portal_tasks' => 'setEnableClientPortalTasks',
        'email_style' => 'setEmailStyle',
        'reply_to_email' => 'setReplyToEmail',
        'bcc_email' => 'setBccEmail',
        'pdf_email_attachment' => 'setPdfEmailAttachment',
        'ubl_email_attachment' => 'setUblEmailAttachment',
        'email_style_custom' => 'setEmailStyleCustom',
        'counter_number_applied' => 'setCounterNumberApplied',
        'quote_number_applied' => 'setQuoteNumberApplied',
        'custom_message_dashboard' => 'setCustomMessageDashboard',
        'custom_message_unpaid_invoice' => 'setCustomMessageUnpaidInvoice',
        'custom_message_paid_invoice' => 'setCustomMessagePaidInvoice',
        'custom_message_unapproved_quote' => 'setCustomMessageUnapprovedQuote',
        'lock_invoices' => 'setLockInvoices',
        'auto_archive_invoice' => 'setAutoArchiveInvoice',
        'auto_archive_quote' => 'setAutoArchiveQuote',
        'auto_convert_quote' => 'setAutoConvertQuote',
        'inclusive_taxes' => 'setInclusiveTaxes',
        'translations' => 'setTranslations',
        'task_number_pattern' => 'setTaskNumberPattern',
        'task_number_counter' => 'setTaskNumberCounter',
        'reminder_send_time' => 'setReminderSendTime',
        'expense_number_pattern' => 'setExpenseNumberPattern',
        'expense_number_counter' => 'setExpenseNumberCounter',
        'vendor_number_pattern' => 'setVendorNumberPattern',
        'vendor_number_counter' => 'setVendorNumberCounter',
        'ticket_number_pattern' => 'setTicketNumberPattern',
        'ticket_number_counter' => 'setTicketNumberCounter',
        'payment_number_pattern' => 'setPaymentNumberPattern',
        'payment_number_counter' => 'setPaymentNumberCounter',
        'invoice_number_pattern' => 'setInvoiceNumberPattern',
        'invoice_number_counter' => 'setInvoiceNumberCounter',
        'quote_number_pattern' => 'setQuoteNumberPattern',
        'quote_number_counter' => 'setQuoteNumberCounter',
        'client_number_pattern' => 'setClientNumberPattern',
        'client_number_counter' => 'setClientNumberCounter',
        'credit_number_pattern' => 'setCreditNumberPattern',
        'credit_number_counter' => 'setCreditNumberCounter',
        'recurring_invoice_number_prefix' => 'setRecurringInvoiceNumberPrefix',
        'reset_counter_frequency_id' => 'setResetCounterFrequencyId',
        'reset_counter_date' => 'setResetCounterDate',
        'counter_padding' => 'setCounterPadding',
        'shared_invoice_quote_counter' => 'setSharedInvoiceQuoteCounter',
        'update_products' => 'setUpdateProducts',
        'convert_products' => 'setConvertProducts',
        'fill_products' => 'setFillProducts',
        'invoice_terms' => 'setInvoiceTerms',
        'quote_terms' => 'setQuoteTerms',
        'invoice_taxes' => 'setInvoiceTaxes',
        'invoice_design_id' => 'setInvoiceDesignId',
        'quote_design_id' => 'setQuoteDesignId',
        'invoice_footer' => 'setInvoiceFooter',
        'invoice_labels' => 'setInvoiceLabels',
        'tax_rate1' => 'setTaxRate1',
        'tax_name1' => 'setTaxName1',
        'tax_rate2' => 'setTaxRate2',
        'tax_name2' => 'setTaxName2',
        'tax_rate3' => 'setTaxRate3',
        'tax_name3' => 'setTaxName3',
        'payment_type_id' => 'setPaymentTypeId',
        'custom_fields' => 'setCustomFields',
        'email_footer' => 'setEmailFooter',
        'email_sending_method' => 'setEmailSendingMethod',
        'gmail_sending_user_id' => 'setGmailSendingUserId',
        'email_subject_invoice' => 'setEmailSubjectInvoice',
        'email_subject_quote' => 'setEmailSubjectQuote',
        'email_subject_payment' => 'setEmailSubjectPayment',
        'email_template_invoice' => 'setEmailTemplateInvoice',
        'email_template_quote' => 'setEmailTemplateQuote',
        'email_template_payment' => 'setEmailTemplatePayment',
        'email_subject_reminder1' => 'setEmailSubjectReminder1',
        'email_subject_reminder2' => 'setEmailSubjectReminder2',
        'email_subject_reminder3' => 'setEmailSubjectReminder3',
        'email_subject_reminder_endless' => 'setEmailSubjectReminderEndless',
        'email_template_reminder1' => 'setEmailTemplateReminder1',
        'email_template_reminder2' => 'setEmailTemplateReminder2',
        'email_template_reminder3' => 'setEmailTemplateReminder3',
        'email_template_reminder_endless' => 'setEmailTemplateReminderEndless',
        'enable_portal_password' => 'setEnablePortalPassword',
        'show_accept_invoice_terms' => 'setShowAcceptInvoiceTerms',
        'show_accept_quote_terms' => 'setShowAcceptQuoteTerms',
        'require_invoice_signature' => 'setRequireInvoiceSignature',
        'require_quote_signature' => 'setRequireQuoteSignature',
        'name' => 'setName',
        'company_logo' => 'setCompanyLogo',
        'website' => 'setWebsite',
        'address1' => 'setAddress1',
        'address2' => 'setAddress2',
        'city' => 'setCity',
        'state' => 'setState',
        'postal_code' => 'setPostalCode',
        'phone' => 'setPhone',
        'email' => 'setEmail',
        'country_id' => 'setCountryId',
        'vat_number' => 'setVatNumber',
        'page_size' => 'setPageSize',
        'font_size' => 'setFontSize',
        'primary_font' => 'setPrimaryFont',
        'secondary_font' => 'setSecondaryFont',
        'hide_paid_to_date' => 'setHidePaidToDate',
        'embed_documents' => 'setEmbedDocuments',
        'all_pages_header' => 'setAllPagesHeader',
        'all_pages_footer' => 'setAllPagesFooter',
        'document_email_attachment' => 'setDocumentEmailAttachment',
        'enable_client_portal_password' => 'setEnableClientPortalPassword',
        'enable_email_markup' => 'setEnableEmailMarkup',
        'enable_client_portal_dashboard' => 'setEnableClientPortalDashboard',
        'enable_client_portal' => 'setEnableClientPortal',
        'email_template_statement' => 'setEmailTemplateStatement',
        'email_subject_statement' => 'setEmailSubjectStatement',
        'signature_on_pdf' => 'setSignatureOnPdf',
        'quote_footer' => 'setQuoteFooter',
        'email_subject_custom1' => 'setEmailSubjectCustom1',
        'email_subject_custom2' => 'setEmailSubjectCustom2',
        'email_subject_custom3' => 'setEmailSubjectCustom3',
        'email_template_custom1' => 'setEmailTemplateCustom1',
        'email_template_custom2' => 'setEmailTemplateCustom2',
        'email_template_custom3' => 'setEmailTemplateCustom3',
        'enable_reminder1' => 'setEnableReminder1',
        'enable_reminder2' => 'setEnableReminder2',
        'enable_reminder3' => 'setEnableReminder3',
        'num_days_reminder1' => 'setNumDaysReminder1',
        'num_days_reminder2' => 'setNumDaysReminder2',
        'num_days_reminder3' => 'setNumDaysReminder3',
        'schedule_reminder1' => 'setScheduleReminder1',
        'schedule_reminder2' => 'setScheduleReminder2',
        'schedule_reminder3' => 'setScheduleReminder3',
        'late_fee_amount1' => 'setLateFeeAmount1',
        'late_fee_amount2' => 'setLateFeeAmount2',
        'late_fee_amount3' => 'setLateFeeAmount3',
        'endless_reminder_frequency_id' => 'setEndlessReminderFrequencyId',
        'client_online_payment_notification' => 'setClientOnlinePaymentNotification',
        'client_manual_payment_notification' => 'setClientManualPaymentNotification'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'timezone_id' => 'getTimezoneId',
        'date_format_id' => 'getDateFormatId',
        'military_time' => 'getMilitaryTime',
        'language_id' => 'getLanguageId',
        'show_currency_code' => 'getShowCurrencyCode',
        'currency_id' => 'getCurrencyId',
        'payment_terms' => 'getPaymentTerms',
        'company_gateway_ids' => 'getCompanyGatewayIds',
        'custom_value1' => 'getCustomValue1',
        'custom_value2' => 'getCustomValue2',
        'custom_value3' => 'getCustomValue3',
        'custom_value4' => 'getCustomValue4',
        'default_task_rate' => 'getDefaultTaskRate',
        'send_reminders' => 'getSendReminders',
        'enable_client_portal_tasks' => 'getEnableClientPortalTasks',
        'email_style' => 'getEmailStyle',
        'reply_to_email' => 'getReplyToEmail',
        'bcc_email' => 'getBccEmail',
        'pdf_email_attachment' => 'getPdfEmailAttachment',
        'ubl_email_attachment' => 'getUblEmailAttachment',
        'email_style_custom' => 'getEmailStyleCustom',
        'counter_number_applied' => 'getCounterNumberApplied',
        'quote_number_applied' => 'getQuoteNumberApplied',
        'custom_message_dashboard' => 'getCustomMessageDashboard',
        'custom_message_unpaid_invoice' => 'getCustomMessageUnpaidInvoice',
        'custom_message_paid_invoice' => 'getCustomMessagePaidInvoice',
        'custom_message_unapproved_quote' => 'getCustomMessageUnapprovedQuote',
        'lock_invoices' => 'getLockInvoices',
        'auto_archive_invoice' => 'getAutoArchiveInvoice',
        'auto_archive_quote' => 'getAutoArchiveQuote',
        'auto_convert_quote' => 'getAutoConvertQuote',
        'inclusive_taxes' => 'getInclusiveTaxes',
        'translations' => 'getTranslations',
        'task_number_pattern' => 'getTaskNumberPattern',
        'task_number_counter' => 'getTaskNumberCounter',
        'reminder_send_time' => 'getReminderSendTime',
        'expense_number_pattern' => 'getExpenseNumberPattern',
        'expense_number_counter' => 'getExpenseNumberCounter',
        'vendor_number_pattern' => 'getVendorNumberPattern',
        'vendor_number_counter' => 'getVendorNumberCounter',
        'ticket_number_pattern' => 'getTicketNumberPattern',
        'ticket_number_counter' => 'getTicketNumberCounter',
        'payment_number_pattern' => 'getPaymentNumberPattern',
        'payment_number_counter' => 'getPaymentNumberCounter',
        'invoice_number_pattern' => 'getInvoiceNumberPattern',
        'invoice_number_counter' => 'getInvoiceNumberCounter',
        'quote_number_pattern' => 'getQuoteNumberPattern',
        'quote_number_counter' => 'getQuoteNumberCounter',
        'client_number_pattern' => 'getClientNumberPattern',
        'client_number_counter' => 'getClientNumberCounter',
        'credit_number_pattern' => 'getCreditNumberPattern',
        'credit_number_counter' => 'getCreditNumberCounter',
        'recurring_invoice_number_prefix' => 'getRecurringInvoiceNumberPrefix',
        'reset_counter_frequency_id' => 'getResetCounterFrequencyId',
        'reset_counter_date' => 'getResetCounterDate',
        'counter_padding' => 'getCounterPadding',
        'shared_invoice_quote_counter' => 'getSharedInvoiceQuoteCounter',
        'update_products' => 'getUpdateProducts',
        'convert_products' => 'getConvertProducts',
        'fill_products' => 'getFillProducts',
        'invoice_terms' => 'getInvoiceTerms',
        'quote_terms' => 'getQuoteTerms',
        'invoice_taxes' => 'getInvoiceTaxes',
        'invoice_design_id' => 'getInvoiceDesignId',
        'quote_design_id' => 'getQuoteDesignId',
        'invoice_footer' => 'getInvoiceFooter',
        'invoice_labels' => 'getInvoiceLabels',
        'tax_rate1' => 'getTaxRate1',
        'tax_name1' => 'getTaxName1',
        'tax_rate2' => 'getTaxRate2',
        'tax_name2' => 'getTaxName2',
        'tax_rate3' => 'getTaxRate3',
        'tax_name3' => 'getTaxName3',
        'payment_type_id' => 'getPaymentTypeId',
        'custom_fields' => 'getCustomFields',
        'email_footer' => 'getEmailFooter',
        'email_sending_method' => 'getEmailSendingMethod',
        'gmail_sending_user_id' => 'getGmailSendingUserId',
        'email_subject_invoice' => 'getEmailSubjectInvoice',
        'email_subject_quote' => 'getEmailSubjectQuote',
        'email_subject_payment' => 'getEmailSubjectPayment',
        'email_template_invoice' => 'getEmailTemplateInvoice',
        'email_template_quote' => 'getEmailTemplateQuote',
        'email_template_payment' => 'getEmailTemplatePayment',
        'email_subject_reminder1' => 'getEmailSubjectReminder1',
        'email_subject_reminder2' => 'getEmailSubjectReminder2',
        'email_subject_reminder3' => 'getEmailSubjectReminder3',
        'email_subject_reminder_endless' => 'getEmailSubjectReminderEndless',
        'email_template_reminder1' => 'getEmailTemplateReminder1',
        'email_template_reminder2' => 'getEmailTemplateReminder2',
        'email_template_reminder3' => 'getEmailTemplateReminder3',
        'email_template_reminder_endless' => 'getEmailTemplateReminderEndless',
        'enable_portal_password' => 'getEnablePortalPassword',
        'show_accept_invoice_terms' => 'getShowAcceptInvoiceTerms',
        'show_accept_quote_terms' => 'getShowAcceptQuoteTerms',
        'require_invoice_signature' => 'getRequireInvoiceSignature',
        'require_quote_signature' => 'getRequireQuoteSignature',
        'name' => 'getName',
        'company_logo' => 'getCompanyLogo',
        'website' => 'getWebsite',
        'address1' => 'getAddress1',
        'address2' => 'getAddress2',
        'city' => 'getCity',
        'state' => 'getState',
        'postal_code' => 'getPostalCode',
        'phone' => 'getPhone',
        'email' => 'getEmail',
        'country_id' => 'getCountryId',
        'vat_number' => 'getVatNumber',
        'page_size' => 'getPageSize',
        'font_size' => 'getFontSize',
        'primary_font' => 'getPrimaryFont',
        'secondary_font' => 'getSecondaryFont',
        'hide_paid_to_date' => 'getHidePaidToDate',
        'embed_documents' => 'getEmbedDocuments',
        'all_pages_header' => 'getAllPagesHeader',
        'all_pages_footer' => 'getAllPagesFooter',
        'document_email_attachment' => 'getDocumentEmailAttachment',
        'enable_client_portal_password' => 'getEnableClientPortalPassword',
        'enable_email_markup' => 'getEnableEmailMarkup',
        'enable_client_portal_dashboard' => 'getEnableClientPortalDashboard',
        'enable_client_portal' => 'getEnableClientPortal',
        'email_template_statement' => 'getEmailTemplateStatement',
        'email_subject_statement' => 'getEmailSubjectStatement',
        'signature_on_pdf' => 'getSignatureOnPdf',
        'quote_footer' => 'getQuoteFooter',
        'email_subject_custom1' => 'getEmailSubjectCustom1',
        'email_subject_custom2' => 'getEmailSubjectCustom2',
        'email_subject_custom3' => 'getEmailSubjectCustom3',
        'email_template_custom1' => 'getEmailTemplateCustom1',
        'email_template_custom2' => 'getEmailTemplateCustom2',
        'email_template_custom3' => 'getEmailTemplateCustom3',
        'enable_reminder1' => 'getEnableReminder1',
        'enable_reminder2' => 'getEnableReminder2',
        'enable_reminder3' => 'getEnableReminder3',
        'num_days_reminder1' => 'getNumDaysReminder1',
        'num_days_reminder2' => 'getNumDaysReminder2',
        'num_days_reminder3' => 'getNumDaysReminder3',
        'schedule_reminder1' => 'getScheduleReminder1',
        'schedule_reminder2' => 'getScheduleReminder2',
        'schedule_reminder3' => 'getScheduleReminder3',
        'late_fee_amount1' => 'getLateFeeAmount1',
        'late_fee_amount2' => 'getLateFeeAmount2',
        'late_fee_amount3' => 'getLateFeeAmount3',
        'endless_reminder_frequency_id' => 'getEndlessReminderFrequencyId',
        'client_online_payment_notification' => 'getClientOnlinePaymentNotification',
        'client_manual_payment_notification' => 'getClientManualPaymentNotification'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('timezone_id', $data ?? [], null);
        $this->setIfExists('date_format_id', $data ?? [], null);
        $this->setIfExists('military_time', $data ?? [], null);
        $this->setIfExists('language_id', $data ?? [], null);
        $this->setIfExists('show_currency_code', $data ?? [], null);
        $this->setIfExists('currency_id', $data ?? [], null);
        $this->setIfExists('payment_terms', $data ?? [], null);
        $this->setIfExists('company_gateway_ids', $data ?? [], null);
        $this->setIfExists('custom_value1', $data ?? [], null);
        $this->setIfExists('custom_value2', $data ?? [], null);
        $this->setIfExists('custom_value3', $data ?? [], null);
        $this->setIfExists('custom_value4', $data ?? [], null);
        $this->setIfExists('default_task_rate', $data ?? [], null);
        $this->setIfExists('send_reminders', $data ?? [], null);
        $this->setIfExists('enable_client_portal_tasks', $data ?? [], null);
        $this->setIfExists('email_style', $data ?? [], null);
        $this->setIfExists('reply_to_email', $data ?? [], null);
        $this->setIfExists('bcc_email', $data ?? [], null);
        $this->setIfExists('pdf_email_attachment', $data ?? [], null);
        $this->setIfExists('ubl_email_attachment', $data ?? [], null);
        $this->setIfExists('email_style_custom', $data ?? [], null);
        $this->setIfExists('counter_number_applied', $data ?? [], null);
        $this->setIfExists('quote_number_applied', $data ?? [], null);
        $this->setIfExists('custom_message_dashboard', $data ?? [], null);
        $this->setIfExists('custom_message_unpaid_invoice', $data ?? [], null);
        $this->setIfExists('custom_message_paid_invoice', $data ?? [], null);
        $this->setIfExists('custom_message_unapproved_quote', $data ?? [], null);
        $this->setIfExists('lock_invoices', $data ?? [], null);
        $this->setIfExists('auto_archive_invoice', $data ?? [], null);
        $this->setIfExists('auto_archive_quote', $data ?? [], null);
        $this->setIfExists('auto_convert_quote', $data ?? [], null);
        $this->setIfExists('inclusive_taxes', $data ?? [], null);
        $this->setIfExists('translations', $data ?? [], null);
        $this->setIfExists('task_number_pattern', $data ?? [], null);
        $this->setIfExists('task_number_counter', $data ?? [], null);
        $this->setIfExists('reminder_send_time', $data ?? [], null);
        $this->setIfExists('expense_number_pattern', $data ?? [], null);
        $this->setIfExists('expense_number_counter', $data ?? [], null);
        $this->setIfExists('vendor_number_pattern', $data ?? [], null);
        $this->setIfExists('vendor_number_counter', $data ?? [], null);
        $this->setIfExists('ticket_number_pattern', $data ?? [], null);
        $this->setIfExists('ticket_number_counter', $data ?? [], null);
        $this->setIfExists('payment_number_pattern', $data ?? [], null);
        $this->setIfExists('payment_number_counter', $data ?? [], null);
        $this->setIfExists('invoice_number_pattern', $data ?? [], null);
        $this->setIfExists('invoice_number_counter', $data ?? [], null);
        $this->setIfExists('quote_number_pattern', $data ?? [], null);
        $this->setIfExists('quote_number_counter', $data ?? [], null);
        $this->setIfExists('client_number_pattern', $data ?? [], null);
        $this->setIfExists('client_number_counter', $data ?? [], null);
        $this->setIfExists('credit_number_pattern', $data ?? [], null);
        $this->setIfExists('credit_number_counter', $data ?? [], null);
        $this->setIfExists('recurring_invoice_number_prefix', $data ?? [], null);
        $this->setIfExists('reset_counter_frequency_id', $data ?? [], null);
        $this->setIfExists('reset_counter_date', $data ?? [], null);
        $this->setIfExists('counter_padding', $data ?? [], null);
        $this->setIfExists('shared_invoice_quote_counter', $data ?? [], null);
        $this->setIfExists('update_products', $data ?? [], null);
        $this->setIfExists('convert_products', $data ?? [], null);
        $this->setIfExists('fill_products', $data ?? [], null);
        $this->setIfExists('invoice_terms', $data ?? [], null);
        $this->setIfExists('quote_terms', $data ?? [], null);
        $this->setIfExists('invoice_taxes', $data ?? [], null);
        $this->setIfExists('invoice_design_id', $data ?? [], null);
        $this->setIfExists('quote_design_id', $data ?? [], null);
        $this->setIfExists('invoice_footer', $data ?? [], null);
        $this->setIfExists('invoice_labels', $data ?? [], null);
        $this->setIfExists('tax_rate1', $data ?? [], null);
        $this->setIfExists('tax_name1', $data ?? [], null);
        $this->setIfExists('tax_rate2', $data ?? [], null);
        $this->setIfExists('tax_name2', $data ?? [], null);
        $this->setIfExists('tax_rate3', $data ?? [], null);
        $this->setIfExists('tax_name3', $data ?? [], null);
        $this->setIfExists('payment_type_id', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
        $this->setIfExists('email_footer', $data ?? [], null);
        $this->setIfExists('email_sending_method', $data ?? [], null);
        $this->setIfExists('gmail_sending_user_id', $data ?? [], null);
        $this->setIfExists('email_subject_invoice', $data ?? [], null);
        $this->setIfExists('email_subject_quote', $data ?? [], null);
        $this->setIfExists('email_subject_payment', $data ?? [], null);
        $this->setIfExists('email_template_invoice', $data ?? [], null);
        $this->setIfExists('email_template_quote', $data ?? [], null);
        $this->setIfExists('email_template_payment', $data ?? [], null);
        $this->setIfExists('email_subject_reminder1', $data ?? [], null);
        $this->setIfExists('email_subject_reminder2', $data ?? [], null);
        $this->setIfExists('email_subject_reminder3', $data ?? [], null);
        $this->setIfExists('email_subject_reminder_endless', $data ?? [], null);
        $this->setIfExists('email_template_reminder1', $data ?? [], null);
        $this->setIfExists('email_template_reminder2', $data ?? [], null);
        $this->setIfExists('email_template_reminder3', $data ?? [], null);
        $this->setIfExists('email_template_reminder_endless', $data ?? [], null);
        $this->setIfExists('enable_portal_password', $data ?? [], null);
        $this->setIfExists('show_accept_invoice_terms', $data ?? [], null);
        $this->setIfExists('show_accept_quote_terms', $data ?? [], null);
        $this->setIfExists('require_invoice_signature', $data ?? [], null);
        $this->setIfExists('require_quote_signature', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('company_logo', $data ?? [], null);
        $this->setIfExists('website', $data ?? [], null);
        $this->setIfExists('address1', $data ?? [], null);
        $this->setIfExists('address2', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('postal_code', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('country_id', $data ?? [], null);
        $this->setIfExists('vat_number', $data ?? [], null);
        $this->setIfExists('page_size', $data ?? [], null);
        $this->setIfExists('font_size', $data ?? [], null);
        $this->setIfExists('primary_font', $data ?? [], null);
        $this->setIfExists('secondary_font', $data ?? [], null);
        $this->setIfExists('hide_paid_to_date', $data ?? [], null);
        $this->setIfExists('embed_documents', $data ?? [], null);
        $this->setIfExists('all_pages_header', $data ?? [], null);
        $this->setIfExists('all_pages_footer', $data ?? [], null);
        $this->setIfExists('document_email_attachment', $data ?? [], null);
        $this->setIfExists('enable_client_portal_password', $data ?? [], null);
        $this->setIfExists('enable_email_markup', $data ?? [], null);
        $this->setIfExists('enable_client_portal_dashboard', $data ?? [], null);
        $this->setIfExists('enable_client_portal', $data ?? [], null);
        $this->setIfExists('email_template_statement', $data ?? [], null);
        $this->setIfExists('email_subject_statement', $data ?? [], null);
        $this->setIfExists('signature_on_pdf', $data ?? [], null);
        $this->setIfExists('quote_footer', $data ?? [], null);
        $this->setIfExists('email_subject_custom1', $data ?? [], null);
        $this->setIfExists('email_subject_custom2', $data ?? [], null);
        $this->setIfExists('email_subject_custom3', $data ?? [], null);
        $this->setIfExists('email_template_custom1', $data ?? [], null);
        $this->setIfExists('email_template_custom2', $data ?? [], null);
        $this->setIfExists('email_template_custom3', $data ?? [], null);
        $this->setIfExists('enable_reminder1', $data ?? [], null);
        $this->setIfExists('enable_reminder2', $data ?? [], null);
        $this->setIfExists('enable_reminder3', $data ?? [], null);
        $this->setIfExists('num_days_reminder1', $data ?? [], null);
        $this->setIfExists('num_days_reminder2', $data ?? [], null);
        $this->setIfExists('num_days_reminder3', $data ?? [], null);
        $this->setIfExists('schedule_reminder1', $data ?? [], null);
        $this->setIfExists('schedule_reminder2', $data ?? [], null);
        $this->setIfExists('schedule_reminder3', $data ?? [], null);
        $this->setIfExists('late_fee_amount1', $data ?? [], null);
        $this->setIfExists('late_fee_amount2', $data ?? [], null);
        $this->setIfExists('late_fee_amount3', $data ?? [], null);
        $this->setIfExists('endless_reminder_frequency_id', $data ?? [], null);
        $this->setIfExists('client_online_payment_notification', $data ?? [], null);
        $this->setIfExists('client_manual_payment_notification', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets timezone_id
     *
     * @return string|null
     */
    public function getTimezoneId()
    {
        return $this->container['timezone_id'];
    }

    /**
     * Sets timezone_id
     *
     * @param string|null $timezone_id The timezone id
     *
     * @return self
     */
    public function setTimezoneId($timezone_id)
    {
        
        $this->container['timezone_id'] = $timezone_id;

        return $this;
    }

    /**
     * Gets date_format_id
     *
     * @return string|null
     */
    public function getDateFormatId()
    {
        return $this->container['date_format_id'];
    }

    /**
     * Sets date_format_id
     *
     * @param string|null $date_format_id The date format id
     *
     * @return self
     */
    public function setDateFormatId($date_format_id)
    {
        
        $this->container['date_format_id'] = $date_format_id;

        return $this;
    }

    /**
     * Gets military_time
     *
     * @return bool|null
     */
    public function getMilitaryTime()
    {
        return $this->container['military_time'];
    }

    /**
     * Sets military_time
     *
     * @param bool|null $military_time Toggles 12/24 hour time
     *
     * @return self
     */
    public function setMilitaryTime($military_time)
    {
        
        $this->container['military_time'] = $military_time;

        return $this;
    }

    /**
     * Gets language_id
     *
     * @return string|null
     */
    public function getLanguageId()
    {
        return $this->container['language_id'];
    }

    /**
     * Sets language_id
     *
     * @param string|null $language_id The language id
     *
     * @return self
     */
    public function setLanguageId($language_id)
    {
        
        $this->container['language_id'] = $language_id;

        return $this;
    }

    /**
     * Gets show_currency_code
     *
     * @return bool|null
     */
    public function getShowCurrencyCode()
    {
        return $this->container['show_currency_code'];
    }

    /**
     * Sets show_currency_code
     *
     * @param bool|null $show_currency_code Toggles whether the currency symbol or code is shown
     *
     * @return self
     */
    public function setShowCurrencyCode($show_currency_code)
    {
        
        $this->container['show_currency_code'] = $show_currency_code;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return string|null
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param string|null $currency_id The default currency id
     *
     * @return self
     */
    public function setCurrencyId($currency_id)
    {
        
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets payment_terms
     *
     * @return int|null
     */
    public function getPaymentTerms()
    {
        return $this->container['payment_terms'];
    }

    /**
     * Sets payment_terms
     *
     * @param int|null $payment_terms -1 sets no payment term, 0 sets payment due immediately, positive integers indicates payment terms in days
     *
     * @return self
     */
    public function setPaymentTerms($payment_terms)
    {
        
        $this->container['payment_terms'] = $payment_terms;

        return $this;
    }

    /**
     * Gets company_gateway_ids
     *
     * @return string|null
     */
    public function getCompanyGatewayIds()
    {
        return $this->container['company_gateway_ids'];
    }

    /**
     * Sets company_gateway_ids
     *
     * @param string|null $company_gateway_ids A commad separate list of available gateways
     *
     * @return self
     */
    public function setCompanyGatewayIds($company_gateway_ids)
    {
        
        $this->container['company_gateway_ids'] = $company_gateway_ids;

        return $this;
    }

    /**
     * Gets custom_value1
     *
     * @return string|null
     */
    public function getCustomValue1()
    {
        return $this->container['custom_value1'];
    }

    /**
     * Sets custom_value1
     *
     * @param string|null $custom_value1 A Custom Label
     *
     * @return self
     */
    public function setCustomValue1($custom_value1)
    {
        
        $this->container['custom_value1'] = $custom_value1;

        return $this;
    }

    /**
     * Gets custom_value2
     *
     * @return string|null
     */
    public function getCustomValue2()
    {
        return $this->container['custom_value2'];
    }

    /**
     * Sets custom_value2
     *
     * @param string|null $custom_value2 A Custom Label
     *
     * @return self
     */
    public function setCustomValue2($custom_value2)
    {
        
        $this->container['custom_value2'] = $custom_value2;

        return $this;
    }

    /**
     * Gets custom_value3
     *
     * @return string|null
     */
    public function getCustomValue3()
    {
        return $this->container['custom_value3'];
    }

    /**
     * Sets custom_value3
     *
     * @param string|null $custom_value3 A Custom Label
     *
     * @return self
     */
    public function setCustomValue3($custom_value3)
    {
        
        $this->container['custom_value3'] = $custom_value3;

        return $this;
    }

    /**
     * Gets custom_value4
     *
     * @return string|null
     */
    public function getCustomValue4()
    {
        return $this->container['custom_value4'];
    }

    /**
     * Sets custom_value4
     *
     * @param string|null $custom_value4 A Custom Label
     *
     * @return self
     */
    public function setCustomValue4($custom_value4)
    {
        
        $this->container['custom_value4'] = $custom_value4;

        return $this;
    }

    /**
     * Gets default_task_rate
     *
     * @return float|null
     */
    public function getDefaultTaskRate()
    {
        return $this->container['default_task_rate'];
    }

    /**
     * Sets default_task_rate
     *
     * @param float|null $default_task_rate The default task rate
     *
     * @return self
     */
    public function setDefaultTaskRate($default_task_rate)
    {
        
        $this->container['default_task_rate'] = $default_task_rate;

        return $this;
    }

    /**
     * Gets send_reminders
     *
     * @return bool|null
     */
    public function getSendReminders()
    {
        return $this->container['send_reminders'];
    }

    /**
     * Sets send_reminders
     *
     * @param bool|null $send_reminders Toggles whether reminders are sent
     *
     * @return self
     */
    public function setSendReminders($send_reminders)
    {
        
        $this->container['send_reminders'] = $send_reminders;

        return $this;
    }

    /**
     * Gets enable_client_portal_tasks
     *
     * @return bool|null
     */
    public function getEnableClientPortalTasks()
    {
        return $this->container['enable_client_portal_tasks'];
    }

    /**
     * Sets enable_client_portal_tasks
     *
     * @param bool|null $enable_client_portal_tasks Show/hide the tasks panel in the client portal
     *
     * @return self
     */
    public function setEnableClientPortalTasks($enable_client_portal_tasks)
    {
        
        $this->container['enable_client_portal_tasks'] = $enable_client_portal_tasks;

        return $this;
    }

    /**
     * Gets email_style
     *
     * @return string|null
     */
    public function getEmailStyle()
    {
        return $this->container['email_style'];
    }

    /**
     * Sets email_style
     *
     * @param string|null $email_style options include plain,light,dark,custom
     *
     * @return self
     */
    public function setEmailStyle($email_style)
    {
        
        $this->container['email_style'] = $email_style;

        return $this;
    }

    /**
     * Gets reply_to_email
     *
     * @return string|null
     */
    public function getReplyToEmail()
    {
        return $this->container['reply_to_email'];
    }

    /**
     * Sets reply_to_email
     *
     * @param string|null $reply_to_email The reply to email address
     *
     * @return self
     */
    public function setReplyToEmail($reply_to_email)
    {
        
        $this->container['reply_to_email'] = $reply_to_email;

        return $this;
    }

    /**
     * Gets bcc_email
     *
     * @return string|null
     */
    public function getBccEmail()
    {
        return $this->container['bcc_email'];
    }

    /**
     * Sets bcc_email
     *
     * @param string|null $bcc_email A comma separate list of BCC emails
     *
     * @return self
     */
    public function setBccEmail($bcc_email)
    {
        
        $this->container['bcc_email'] = $bcc_email;

        return $this;
    }

    /**
     * Gets pdf_email_attachment
     *
     * @return bool|null
     */
    public function getPdfEmailAttachment()
    {
        return $this->container['pdf_email_attachment'];
    }

    /**
     * Sets pdf_email_attachment
     *
     * @param bool|null $pdf_email_attachment Toggles whether to attach PDF as attachment
     *
     * @return self
     */
    public function setPdfEmailAttachment($pdf_email_attachment)
    {
        
        $this->container['pdf_email_attachment'] = $pdf_email_attachment;

        return $this;
    }

    /**
     * Gets ubl_email_attachment
     *
     * @return bool|null
     */
    public function getUblEmailAttachment()
    {
        return $this->container['ubl_email_attachment'];
    }

    /**
     * Sets ubl_email_attachment
     *
     * @param bool|null $ubl_email_attachment Toggles whether to attach UBL as attachment
     *
     * @return self
     */
    public function setUblEmailAttachment($ubl_email_attachment)
    {
        
        $this->container['ubl_email_attachment'] = $ubl_email_attachment;

        return $this;
    }

    /**
     * Gets email_style_custom
     *
     * @return string|null
     */
    public function getEmailStyleCustom()
    {
        return $this->container['email_style_custom'];
    }

    /**
     * Sets email_style_custom
     *
     * @param string|null $email_style_custom The custom template
     *
     * @return self
     */
    public function setEmailStyleCustom($email_style_custom)
    {
        
        $this->container['email_style_custom'] = $email_style_custom;

        return $this;
    }

    /**
     * Gets counter_number_applied
     *
     * @return string|null
     */
    public function getCounterNumberApplied()
    {
        return $this->container['counter_number_applied'];
    }

    /**
     * Sets counter_number_applied
     *
     * @param string|null $counter_number_applied enum when the invoice number counter is set, ie when_saved, when_sent, when_paid
     *
     * @return self
     */
    public function setCounterNumberApplied($counter_number_applied)
    {
        
        $this->container['counter_number_applied'] = $counter_number_applied;

        return $this;
    }

    /**
     * Gets quote_number_applied
     *
     * @return string|null
     */
    public function getQuoteNumberApplied()
    {
        return $this->container['quote_number_applied'];
    }

    /**
     * Sets quote_number_applied
     *
     * @param string|null $quote_number_applied enum when the quote number counter is set, ie when_saved, when_sent
     *
     * @return self
     */
    public function setQuoteNumberApplied($quote_number_applied)
    {
        
        $this->container['quote_number_applied'] = $quote_number_applied;

        return $this;
    }

    /**
     * Gets custom_message_dashboard
     *
     * @return string|null
     */
    public function getCustomMessageDashboard()
    {
        return $this->container['custom_message_dashboard'];
    }

    /**
     * Sets custom_message_dashboard
     *
     * @param string|null $custom_message_dashboard A custom message which is displayed on the dashboard
     *
     * @return self
     */
    public function setCustomMessageDashboard($custom_message_dashboard)
    {
        
        $this->container['custom_message_dashboard'] = $custom_message_dashboard;

        return $this;
    }

    /**
     * Gets custom_message_unpaid_invoice
     *
     * @return string|null
     */
    public function getCustomMessageUnpaidInvoice()
    {
        return $this->container['custom_message_unpaid_invoice'];
    }

    /**
     * Sets custom_message_unpaid_invoice
     *
     * @param string|null $custom_message_unpaid_invoice A custom message which is displayed in the client portal when a client is viewing a unpaid invoice.
     *
     * @return self
     */
    public function setCustomMessageUnpaidInvoice($custom_message_unpaid_invoice)
    {
        
        $this->container['custom_message_unpaid_invoice'] = $custom_message_unpaid_invoice;

        return $this;
    }

    /**
     * Gets custom_message_paid_invoice
     *
     * @return string|null
     */
    public function getCustomMessagePaidInvoice()
    {
        return $this->container['custom_message_paid_invoice'];
    }

    /**
     * Sets custom_message_paid_invoice
     *
     * @param string|null $custom_message_paid_invoice A custom message which is displayed in the client portal when a client is viewing a paid invoice.
     *
     * @return self
     */
    public function setCustomMessagePaidInvoice($custom_message_paid_invoice)
    {
        
        $this->container['custom_message_paid_invoice'] = $custom_message_paid_invoice;

        return $this;
    }

    /**
     * Gets custom_message_unapproved_quote
     *
     * @return string|null
     */
    public function getCustomMessageUnapprovedQuote()
    {
        return $this->container['custom_message_unapproved_quote'];
    }

    /**
     * Sets custom_message_unapproved_quote
     *
     * @param string|null $custom_message_unapproved_quote A custom message which is displayed in the client portal when a client is viewing a unapproved quote.
     *
     * @return self
     */
    public function setCustomMessageUnapprovedQuote($custom_message_unapproved_quote)
    {
        
        $this->container['custom_message_unapproved_quote'] = $custom_message_unapproved_quote;

        return $this;
    }

    /**
     * Gets lock_invoices
     *
     * @return bool|null
     */
    public function getLockInvoices()
    {
        return $this->container['lock_invoices'];
    }

    /**
     * Sets lock_invoices
     *
     * @param bool|null $lock_invoices Toggles whether invoices are locked once sent and cannot be modified further
     *
     * @return self
     */
    public function setLockInvoices($lock_invoices)
    {
        
        $this->container['lock_invoices'] = $lock_invoices;

        return $this;
    }

    /**
     * Gets auto_archive_invoice
     *
     * @return bool|null
     */
    public function getAutoArchiveInvoice()
    {
        return $this->container['auto_archive_invoice'];
    }

    /**
     * Sets auto_archive_invoice
     *
     * @param bool|null $auto_archive_invoice Toggles whether a invoice is archived immediately following payment
     *
     * @return self
     */
    public function setAutoArchiveInvoice($auto_archive_invoice)
    {
        
        $this->container['auto_archive_invoice'] = $auto_archive_invoice;

        return $this;
    }

    /**
     * Gets auto_archive_quote
     *
     * @return bool|null
     */
    public function getAutoArchiveQuote()
    {
        return $this->container['auto_archive_quote'];
    }

    /**
     * Sets auto_archive_quote
     *
     * @param bool|null $auto_archive_quote Toggles whether a quote is archived after being converted to a invoice
     *
     * @return self
     */
    public function setAutoArchiveQuote($auto_archive_quote)
    {
        
        $this->container['auto_archive_quote'] = $auto_archive_quote;

        return $this;
    }

    /**
     * Gets auto_convert_quote
     *
     * @return bool|null
     */
    public function getAutoConvertQuote()
    {
        return $this->container['auto_convert_quote'];
    }

    /**
     * Sets auto_convert_quote
     *
     * @param bool|null $auto_convert_quote Toggles whether a quote is converted to a invoice when approved
     *
     * @return self
     */
    public function setAutoConvertQuote($auto_convert_quote)
    {
        
        $this->container['auto_convert_quote'] = $auto_convert_quote;

        return $this;
    }

    /**
     * Gets inclusive_taxes
     *
     * @return bool|null
     */
    public function getInclusiveTaxes()
    {
        return $this->container['inclusive_taxes'];
    }

    /**
     * Sets inclusive_taxes
     *
     * @param bool|null $inclusive_taxes Boolean flag determining whether inclusive or exclusive taxes are used
     *
     * @return self
     */
    public function setInclusiveTaxes($inclusive_taxes)
    {
        
        $this->container['inclusive_taxes'] = $inclusive_taxes;

        return $this;
    }

    /**
     * Gets translations
     *
     * @return object|null
     */
    public function getTranslations()
    {
        return $this->container['translations'];
    }

    /**
     * Sets translations
     *
     * @param object|null $translations JSON payload of customized translations
     *
     * @return self
     */
    public function setTranslations($translations)
    {
        
        $this->container['translations'] = $translations;

        return $this;
    }

    /**
     * Gets task_number_pattern
     *
     * @return string|null
     */
    public function getTaskNumberPattern()
    {
        return $this->container['task_number_pattern'];
    }

    /**
     * Sets task_number_pattern
     *
     * @param string|null $task_number_pattern Allows customisation of the task number pattern
     *
     * @return self
     */
    public function setTaskNumberPattern($task_number_pattern)
    {
        
        $this->container['task_number_pattern'] = $task_number_pattern;

        return $this;
    }

    /**
     * Gets task_number_counter
     *
     * @return int|null
     */
    public function getTaskNumberCounter()
    {
        return $this->container['task_number_counter'];
    }

    /**
     * Sets task_number_counter
     *
     * @param int|null $task_number_counter The incrementing counter for tasks
     *
     * @return self
     */
    public function setTaskNumberCounter($task_number_counter)
    {
        
        $this->container['task_number_counter'] = $task_number_counter;

        return $this;
    }

    /**
     * Gets reminder_send_time
     *
     * @return int|null
     */
    public function getReminderSendTime()
    {
        return $this->container['reminder_send_time'];
    }

    /**
     * Sets reminder_send_time
     *
     * @param int|null $reminder_send_time Time from UTC +0 when the email will be sent to the client
     *
     * @return self
     */
    public function setReminderSendTime($reminder_send_time)
    {
        
        $this->container['reminder_send_time'] = $reminder_send_time;

        return $this;
    }

    /**
     * Gets expense_number_pattern
     *
     * @return string|null
     */
    public function getExpenseNumberPattern()
    {
        return $this->container['expense_number_pattern'];
    }

    /**
     * Sets expense_number_pattern
     *
     * @param string|null $expense_number_pattern Allows customisation of the expense number pattern
     *
     * @return self
     */
    public function setExpenseNumberPattern($expense_number_pattern)
    {
        
        $this->container['expense_number_pattern'] = $expense_number_pattern;

        return $this;
    }

    /**
     * Gets expense_number_counter
     *
     * @return int|null
     */
    public function getExpenseNumberCounter()
    {
        return $this->container['expense_number_counter'];
    }

    /**
     * Sets expense_number_counter
     *
     * @param int|null $expense_number_counter The incrementing counter for expenses
     *
     * @return self
     */
    public function setExpenseNumberCounter($expense_number_counter)
    {
        
        $this->container['expense_number_counter'] = $expense_number_counter;

        return $this;
    }

    /**
     * Gets vendor_number_pattern
     *
     * @return string|null
     */
    public function getVendorNumberPattern()
    {
        return $this->container['vendor_number_pattern'];
    }

    /**
     * Sets vendor_number_pattern
     *
     * @param string|null $vendor_number_pattern Allows customisation of the vendor number pattern
     *
     * @return self
     */
    public function setVendorNumberPattern($vendor_number_pattern)
    {
        
        $this->container['vendor_number_pattern'] = $vendor_number_pattern;

        return $this;
    }

    /**
     * Gets vendor_number_counter
     *
     * @return int|null
     */
    public function getVendorNumberCounter()
    {
        return $this->container['vendor_number_counter'];
    }

    /**
     * Sets vendor_number_counter
     *
     * @param int|null $vendor_number_counter The incrementing counter for vendors
     *
     * @return self
     */
    public function setVendorNumberCounter($vendor_number_counter)
    {
        
        $this->container['vendor_number_counter'] = $vendor_number_counter;

        return $this;
    }

    /**
     * Gets ticket_number_pattern
     *
     * @return string|null
     */
    public function getTicketNumberPattern()
    {
        return $this->container['ticket_number_pattern'];
    }

    /**
     * Sets ticket_number_pattern
     *
     * @param string|null $ticket_number_pattern Allows customisation of the ticket number pattern
     *
     * @return self
     */
    public function setTicketNumberPattern($ticket_number_pattern)
    {
        
        $this->container['ticket_number_pattern'] = $ticket_number_pattern;

        return $this;
    }

    /**
     * Gets ticket_number_counter
     *
     * @return int|null
     */
    public function getTicketNumberCounter()
    {
        return $this->container['ticket_number_counter'];
    }

    /**
     * Sets ticket_number_counter
     *
     * @param int|null $ticket_number_counter The incrementing counter for tickets
     *
     * @return self
     */
    public function setTicketNumberCounter($ticket_number_counter)
    {
        
        $this->container['ticket_number_counter'] = $ticket_number_counter;

        return $this;
    }

    /**
     * Gets payment_number_pattern
     *
     * @return string|null
     */
    public function getPaymentNumberPattern()
    {
        return $this->container['payment_number_pattern'];
    }

    /**
     * Sets payment_number_pattern
     *
     * @param string|null $payment_number_pattern Allows customisation of the payment number pattern
     *
     * @return self
     */
    public function setPaymentNumberPattern($payment_number_pattern)
    {
        
        $this->container['payment_number_pattern'] = $payment_number_pattern;

        return $this;
    }

    /**
     * Gets payment_number_counter
     *
     * @return int|null
     */
    public function getPaymentNumberCounter()
    {
        return $this->container['payment_number_counter'];
    }

    /**
     * Sets payment_number_counter
     *
     * @param int|null $payment_number_counter The incrementing counter for payments
     *
     * @return self
     */
    public function setPaymentNumberCounter($payment_number_counter)
    {
        
        $this->container['payment_number_counter'] = $payment_number_counter;

        return $this;
    }

    /**
     * Gets invoice_number_pattern
     *
     * @return string|null
     */
    public function getInvoiceNumberPattern()
    {
        return $this->container['invoice_number_pattern'];
    }

    /**
     * Sets invoice_number_pattern
     *
     * @param string|null $invoice_number_pattern Allows customisation of the invoice number pattern
     *
     * @return self
     */
    public function setInvoiceNumberPattern($invoice_number_pattern)
    {
        
        $this->container['invoice_number_pattern'] = $invoice_number_pattern;

        return $this;
    }

    /**
     * Gets invoice_number_counter
     *
     * @return int|null
     */
    public function getInvoiceNumberCounter()
    {
        return $this->container['invoice_number_counter'];
    }

    /**
     * Sets invoice_number_counter
     *
     * @param int|null $invoice_number_counter The incrementing counter for invoices
     *
     * @return self
     */
    public function setInvoiceNumberCounter($invoice_number_counter)
    {
        
        $this->container['invoice_number_counter'] = $invoice_number_counter;

        return $this;
    }

    /**
     * Gets quote_number_pattern
     *
     * @return string|null
     */
    public function getQuoteNumberPattern()
    {
        return $this->container['quote_number_pattern'];
    }

    /**
     * Sets quote_number_pattern
     *
     * @param string|null $quote_number_pattern Allows customisation of the quote number pattern
     *
     * @return self
     */
    public function setQuoteNumberPattern($quote_number_pattern)
    {
        
        $this->container['quote_number_pattern'] = $quote_number_pattern;

        return $this;
    }

    /**
     * Gets quote_number_counter
     *
     * @return int|null
     */
    public function getQuoteNumberCounter()
    {
        return $this->container['quote_number_counter'];
    }

    /**
     * Sets quote_number_counter
     *
     * @param int|null $quote_number_counter The incrementing counter for quotes
     *
     * @return self
     */
    public function setQuoteNumberCounter($quote_number_counter)
    {
        
        $this->container['quote_number_counter'] = $quote_number_counter;

        return $this;
    }

    /**
     * Gets client_number_pattern
     *
     * @return string|null
     */
    public function getClientNumberPattern()
    {
        return $this->container['client_number_pattern'];
    }

    /**
     * Sets client_number_pattern
     *
     * @param string|null $client_number_pattern Allows customisation of the client number pattern
     *
     * @return self
     */
    public function setClientNumberPattern($client_number_pattern)
    {
        
        $this->container['client_number_pattern'] = $client_number_pattern;

        return $this;
    }

    /**
     * Gets client_number_counter
     *
     * @return int|null
     */
    public function getClientNumberCounter()
    {
        return $this->container['client_number_counter'];
    }

    /**
     * Sets client_number_counter
     *
     * @param int|null $client_number_counter The incrementing counter for clients
     *
     * @return self
     */
    public function setClientNumberCounter($client_number_counter)
    {
        
        $this->container['client_number_counter'] = $client_number_counter;

        return $this;
    }

    /**
     * Gets credit_number_pattern
     *
     * @return string|null
     */
    public function getCreditNumberPattern()
    {
        return $this->container['credit_number_pattern'];
    }

    /**
     * Sets credit_number_pattern
     *
     * @param string|null $credit_number_pattern Allows customisation of the credit number pattern
     *
     * @return self
     */
    public function setCreditNumberPattern($credit_number_pattern)
    {
        
        $this->container['credit_number_pattern'] = $credit_number_pattern;

        return $this;
    }

    /**
     * Gets credit_number_counter
     *
     * @return int|null
     */
    public function getCreditNumberCounter()
    {
        return $this->container['credit_number_counter'];
    }

    /**
     * Sets credit_number_counter
     *
     * @param int|null $credit_number_counter The incrementing counter for credits
     *
     * @return self
     */
    public function setCreditNumberCounter($credit_number_counter)
    {
        
        $this->container['credit_number_counter'] = $credit_number_counter;

        return $this;
    }

    /**
     * Gets recurring_invoice_number_prefix
     *
     * @return string|null
     */
    public function getRecurringInvoiceNumberPrefix()
    {
        return $this->container['recurring_invoice_number_prefix'];
    }

    /**
     * Sets recurring_invoice_number_prefix
     *
     * @param string|null $recurring_invoice_number_prefix This string is prepended to the recurring invoice number
     *
     * @return self
     */
    public function setRecurringInvoiceNumberPrefix($recurring_invoice_number_prefix)
    {
        
        $this->container['recurring_invoice_number_prefix'] = $recurring_invoice_number_prefix;

        return $this;
    }

    /**
     * Gets reset_counter_frequency_id
     *
     * @return int|null
     */
    public function getResetCounterFrequencyId()
    {
        return $this->container['reset_counter_frequency_id'];
    }

    /**
     * Sets reset_counter_frequency_id
     *
     * @param int|null $reset_counter_frequency_id CONSTANT which is used to apply the frequency which the counters are reset
     *
     * @return self
     */
    public function setResetCounterFrequencyId($reset_counter_frequency_id)
    {
        
        $this->container['reset_counter_frequency_id'] = $reset_counter_frequency_id;

        return $this;
    }

    /**
     * Gets reset_counter_date
     *
     * @return string|null
     */
    public function getResetCounterDate()
    {
        return $this->container['reset_counter_date'];
    }

    /**
     * Sets reset_counter_date
     *
     * @param string|null $reset_counter_date The explicit date which is used to reset counters
     *
     * @return self
     */
    public function setResetCounterDate($reset_counter_date)
    {
        
        $this->container['reset_counter_date'] = $reset_counter_date;

        return $this;
    }

    /**
     * Gets counter_padding
     *
     * @return int|null
     */
    public function getCounterPadding()
    {
        return $this->container['counter_padding'];
    }

    /**
     * Sets counter_padding
     *
     * @param int|null $counter_padding Pads the counter with leading zeros
     *
     * @return self
     */
    public function setCounterPadding($counter_padding)
    {
        
        $this->container['counter_padding'] = $counter_padding;

        return $this;
    }

    /**
     * Gets shared_invoice_quote_counter
     *
     * @return bool|null
     */
    public function getSharedInvoiceQuoteCounter()
    {
        return $this->container['shared_invoice_quote_counter'];
    }

    /**
     * Sets shared_invoice_quote_counter
     *
     * @param bool|null $shared_invoice_quote_counter Flags whether to share the counter for invoices and quotes
     *
     * @return self
     */
    public function setSharedInvoiceQuoteCounter($shared_invoice_quote_counter)
    {
        
        $this->container['shared_invoice_quote_counter'] = $shared_invoice_quote_counter;

        return $this;
    }

    /**
     * Gets update_products
     *
     * @return bool|null
     */
    public function getUpdateProducts()
    {
        return $this->container['update_products'];
    }

    /**
     * Sets update_products
     *
     * @param bool|null $update_products Determines if client fields are updated from third party APIs
     *
     * @return self
     */
    public function setUpdateProducts($update_products)
    {
        
        $this->container['update_products'] = $update_products;

        return $this;
    }

    /**
     * Gets convert_products
     *
     * @return bool|null
     */
    public function getConvertProducts()
    {
        return $this->container['convert_products'];
    }

    /**
     * Sets convert_products
     *
     * @param bool|null $convert_products 
     *
     * @return self
     */
    public function setConvertProducts($convert_products)
    {
        
        $this->container['convert_products'] = $convert_products;

        return $this;
    }

    /**
     * Gets fill_products
     *
     * @return bool|null
     */
    public function getFillProducts()
    {
        return $this->container['fill_products'];
    }

    /**
     * Sets fill_products
     *
     * @param bool|null $fill_products Automatically fill products based on product_key
     *
     * @return self
     */
    public function setFillProducts($fill_products)
    {
        
        $this->container['fill_products'] = $fill_products;

        return $this;
    }

    /**
     * Gets invoice_terms
     *
     * @return string|null
     */
    public function getInvoiceTerms()
    {
        return $this->container['invoice_terms'];
    }

    /**
     * Sets invoice_terms
     *
     * @param string|null $invoice_terms The default invoice terms
     *
     * @return self
     */
    public function setInvoiceTerms($invoice_terms)
    {
        
        $this->container['invoice_terms'] = $invoice_terms;

        return $this;
    }

    /**
     * Gets quote_terms
     *
     * @return string|null
     */
    public function getQuoteTerms()
    {
        return $this->container['quote_terms'];
    }

    /**
     * Sets quote_terms
     *
     * @param string|null $quote_terms The default quote terms
     *
     * @return self
     */
    public function setQuoteTerms($quote_terms)
    {
        
        $this->container['quote_terms'] = $quote_terms;

        return $this;
    }

    /**
     * Gets invoice_taxes
     *
     * @return float|null
     */
    public function getInvoiceTaxes()
    {
        return $this->container['invoice_taxes'];
    }

    /**
     * Sets invoice_taxes
     *
     * @param float|null $invoice_taxes Taxes can be applied to the invoice
     *
     * @return self
     */
    public function setInvoiceTaxes($invoice_taxes)
    {
        
        $this->container['invoice_taxes'] = $invoice_taxes;

        return $this;
    }

    /**
     * Gets invoice_design_id
     *
     * @return string|null
     */
    public function getInvoiceDesignId()
    {
        return $this->container['invoice_design_id'];
    }

    /**
     * Sets invoice_design_id
     *
     * @param string|null $invoice_design_id The default design id (invoice, quote etc)
     *
     * @return self
     */
    public function setInvoiceDesignId($invoice_design_id)
    {
        
        $this->container['invoice_design_id'] = $invoice_design_id;

        return $this;
    }

    /**
     * Gets quote_design_id
     *
     * @return string|null
     */
    public function getQuoteDesignId()
    {
        return $this->container['quote_design_id'];
    }

    /**
     * Sets quote_design_id
     *
     * @param string|null $quote_design_id The default design id (invoice, quote etc)
     *
     * @return self
     */
    public function setQuoteDesignId($quote_design_id)
    {
        
        $this->container['quote_design_id'] = $quote_design_id;

        return $this;
    }

    /**
     * Gets invoice_footer
     *
     * @return string|null
     */
    public function getInvoiceFooter()
    {
        return $this->container['invoice_footer'];
    }

    /**
     * Sets invoice_footer
     *
     * @param string|null $invoice_footer The default invoice footer
     *
     * @return self
     */
    public function setInvoiceFooter($invoice_footer)
    {
        
        $this->container['invoice_footer'] = $invoice_footer;

        return $this;
    }

    /**
     * Gets invoice_labels
     *
     * @return string|null
     */
    public function getInvoiceLabels()
    {
        return $this->container['invoice_labels'];
    }

    /**
     * Sets invoice_labels
     *
     * @param string|null $invoice_labels JSON string of invoice labels
     *
     * @return self
     */
    public function setInvoiceLabels($invoice_labels)
    {
        
        $this->container['invoice_labels'] = $invoice_labels;

        return $this;
    }

    /**
     * Gets tax_rate1
     *
     * @return float|null
     */
    public function getTaxRate1()
    {
        return $this->container['tax_rate1'];
    }

    /**
     * Sets tax_rate1
     *
     * @param float|null $tax_rate1 The tax rate (float)
     *
     * @return self
     */
    public function setTaxRate1($tax_rate1)
    {
        
        $this->container['tax_rate1'] = $tax_rate1;

        return $this;
    }

    /**
     * Gets tax_name1
     *
     * @return string|null
     */
    public function getTaxName1()
    {
        return $this->container['tax_name1'];
    }

    /**
     * Sets tax_name1
     *
     * @param string|null $tax_name1 The tax name
     *
     * @return self
     */
    public function setTaxName1($tax_name1)
    {
        
        $this->container['tax_name1'] = $tax_name1;

        return $this;
    }

    /**
     * Gets tax_rate2
     *
     * @return float|null
     */
    public function getTaxRate2()
    {
        return $this->container['tax_rate2'];
    }

    /**
     * Sets tax_rate2
     *
     * @param float|null $tax_rate2 The tax rate (float)
     *
     * @return self
     */
    public function setTaxRate2($tax_rate2)
    {
        
        $this->container['tax_rate2'] = $tax_rate2;

        return $this;
    }

    /**
     * Gets tax_name2
     *
     * @return string|null
     */
    public function getTaxName2()
    {
        return $this->container['tax_name2'];
    }

    /**
     * Sets tax_name2
     *
     * @param string|null $tax_name2 The tax name
     *
     * @return self
     */
    public function setTaxName2($tax_name2)
    {
        
        $this->container['tax_name2'] = $tax_name2;

        return $this;
    }

    /**
     * Gets tax_rate3
     *
     * @return float|null
     */
    public function getTaxRate3()
    {
        return $this->container['tax_rate3'];
    }

    /**
     * Sets tax_rate3
     *
     * @param float|null $tax_rate3 The tax rate (float)
     *
     * @return self
     */
    public function setTaxRate3($tax_rate3)
    {
        
        $this->container['tax_rate3'] = $tax_rate3;

        return $this;
    }

    /**
     * Gets tax_name3
     *
     * @return string|null
     */
    public function getTaxName3()
    {
        return $this->container['tax_name3'];
    }

    /**
     * Sets tax_name3
     *
     * @param string|null $tax_name3 The tax name
     *
     * @return self
     */
    public function setTaxName3($tax_name3)
    {
        
        $this->container['tax_name3'] = $tax_name3;

        return $this;
    }

    /**
     * Gets payment_type_id
     *
     * @return string|null
     */
    public function getPaymentTypeId()
    {
        return $this->container['payment_type_id'];
    }

    /**
     * Sets payment_type_id
     *
     * @param string|null $payment_type_id The default payment type id
     *
     * @return self
     */
    public function setPaymentTypeId($payment_type_id)
    {
        
        $this->container['payment_type_id'] = $payment_type_id;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return string|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param string|null $custom_fields JSON string of custom fields
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets email_footer
     *
     * @return string|null
     */
    public function getEmailFooter()
    {
        return $this->container['email_footer'];
    }

    /**
     * Sets email_footer
     *
     * @param string|null $email_footer The default email footer
     *
     * @return self
     */
    public function setEmailFooter($email_footer)
    {
        
        $this->container['email_footer'] = $email_footer;

        return $this;
    }

    /**
     * Gets email_sending_method
     *
     * @return string|null
     */
    public function getEmailSendingMethod()
    {
        return $this->container['email_sending_method'];
    }

    /**
     * Sets email_sending_method
     *
     * @param string|null $email_sending_method The email driver to use to send email, options include default, gmail
     *
     * @return self
     */
    public function setEmailSendingMethod($email_sending_method)
    {
        
        $this->container['email_sending_method'] = $email_sending_method;

        return $this;
    }

    /**
     * Gets gmail_sending_user_id
     *
     * @return string|null
     */
    public function getGmailSendingUserId()
    {
        return $this->container['gmail_sending_user_id'];
    }

    /**
     * Sets gmail_sending_user_id
     *
     * @param string|null $gmail_sending_user_id The hashed_id of the user account to send email from
     *
     * @return self
     */
    public function setGmailSendingUserId($gmail_sending_user_id)
    {
        
        $this->container['gmail_sending_user_id'] = $gmail_sending_user_id;

        return $this;
    }

    /**
     * Gets email_subject_invoice
     *
     * @return string|null
     */
    public function getEmailSubjectInvoice()
    {
        return $this->container['email_subject_invoice'];
    }

    /**
     * Sets email_subject_invoice
     *
     * @param string|null $email_subject_invoice 
     *
     * @return self
     */
    public function setEmailSubjectInvoice($email_subject_invoice)
    {
        
        $this->container['email_subject_invoice'] = $email_subject_invoice;

        return $this;
    }

    /**
     * Gets email_subject_quote
     *
     * @return string|null
     */
    public function getEmailSubjectQuote()
    {
        return $this->container['email_subject_quote'];
    }

    /**
     * Sets email_subject_quote
     *
     * @param string|null $email_subject_quote 
     *
     * @return self
     */
    public function setEmailSubjectQuote($email_subject_quote)
    {
        
        $this->container['email_subject_quote'] = $email_subject_quote;

        return $this;
    }

    /**
     * Gets email_subject_payment
     *
     * @return string|null
     */
    public function getEmailSubjectPayment()
    {
        return $this->container['email_subject_payment'];
    }

    /**
     * Sets email_subject_payment
     *
     * @param string|null $email_subject_payment 
     *
     * @return self
     */
    public function setEmailSubjectPayment($email_subject_payment)
    {
        
        $this->container['email_subject_payment'] = $email_subject_payment;

        return $this;
    }

    /**
     * Gets email_template_invoice
     *
     * @return string|null
     */
    public function getEmailTemplateInvoice()
    {
        return $this->container['email_template_invoice'];
    }

    /**
     * Sets email_template_invoice
     *
     * @param string|null $email_template_invoice The full template for invoice emails
     *
     * @return self
     */
    public function setEmailTemplateInvoice($email_template_invoice)
    {
        
        $this->container['email_template_invoice'] = $email_template_invoice;

        return $this;
    }

    /**
     * Gets email_template_quote
     *
     * @return string|null
     */
    public function getEmailTemplateQuote()
    {
        return $this->container['email_template_quote'];
    }

    /**
     * Sets email_template_quote
     *
     * @param string|null $email_template_quote The full template for quote emails
     *
     * @return self
     */
    public function setEmailTemplateQuote($email_template_quote)
    {
        
        $this->container['email_template_quote'] = $email_template_quote;

        return $this;
    }

    /**
     * Gets email_template_payment
     *
     * @return string|null
     */
    public function getEmailTemplatePayment()
    {
        return $this->container['email_template_payment'];
    }

    /**
     * Sets email_template_payment
     *
     * @param string|null $email_template_payment The full template for payment emails
     *
     * @return self
     */
    public function setEmailTemplatePayment($email_template_payment)
    {
        
        $this->container['email_template_payment'] = $email_template_payment;

        return $this;
    }

    /**
     * Gets email_subject_reminder1
     *
     * @return string|null
     */
    public function getEmailSubjectReminder1()
    {
        return $this->container['email_subject_reminder1'];
    }

    /**
     * Sets email_subject_reminder1
     *
     * @param string|null $email_subject_reminder1 Email subject for Reminder
     *
     * @return self
     */
    public function setEmailSubjectReminder1($email_subject_reminder1)
    {
        
        $this->container['email_subject_reminder1'] = $email_subject_reminder1;

        return $this;
    }

    /**
     * Gets email_subject_reminder2
     *
     * @return string|null
     */
    public function getEmailSubjectReminder2()
    {
        return $this->container['email_subject_reminder2'];
    }

    /**
     * Sets email_subject_reminder2
     *
     * @param string|null $email_subject_reminder2 Email subject for Reminder
     *
     * @return self
     */
    public function setEmailSubjectReminder2($email_subject_reminder2)
    {
        
        $this->container['email_subject_reminder2'] = $email_subject_reminder2;

        return $this;
    }

    /**
     * Gets email_subject_reminder3
     *
     * @return string|null
     */
    public function getEmailSubjectReminder3()
    {
        return $this->container['email_subject_reminder3'];
    }

    /**
     * Sets email_subject_reminder3
     *
     * @param string|null $email_subject_reminder3 Email subject for Reminder
     *
     * @return self
     */
    public function setEmailSubjectReminder3($email_subject_reminder3)
    {
        
        $this->container['email_subject_reminder3'] = $email_subject_reminder3;

        return $this;
    }

    /**
     * Gets email_subject_reminder_endless
     *
     * @return string|null
     */
    public function getEmailSubjectReminderEndless()
    {
        return $this->container['email_subject_reminder_endless'];
    }

    /**
     * Sets email_subject_reminder_endless
     *
     * @param string|null $email_subject_reminder_endless Email subject for endless reminders
     *
     * @return self
     */
    public function setEmailSubjectReminderEndless($email_subject_reminder_endless)
    {
        
        $this->container['email_subject_reminder_endless'] = $email_subject_reminder_endless;

        return $this;
    }

    /**
     * Gets email_template_reminder1
     *
     * @return string|null
     */
    public function getEmailTemplateReminder1()
    {
        return $this->container['email_template_reminder1'];
    }

    /**
     * Sets email_template_reminder1
     *
     * @param string|null $email_template_reminder1 The full template for Reminder 1
     *
     * @return self
     */
    public function setEmailTemplateReminder1($email_template_reminder1)
    {
        
        $this->container['email_template_reminder1'] = $email_template_reminder1;

        return $this;
    }

    /**
     * Gets email_template_reminder2
     *
     * @return string|null
     */
    public function getEmailTemplateReminder2()
    {
        return $this->container['email_template_reminder2'];
    }

    /**
     * Sets email_template_reminder2
     *
     * @param string|null $email_template_reminder2 The full template for Reminder 2
     *
     * @return self
     */
    public function setEmailTemplateReminder2($email_template_reminder2)
    {
        
        $this->container['email_template_reminder2'] = $email_template_reminder2;

        return $this;
    }

    /**
     * Gets email_template_reminder3
     *
     * @return string|null
     */
    public function getEmailTemplateReminder3()
    {
        return $this->container['email_template_reminder3'];
    }

    /**
     * Sets email_template_reminder3
     *
     * @param string|null $email_template_reminder3 The full template for Reminder 3
     *
     * @return self
     */
    public function setEmailTemplateReminder3($email_template_reminder3)
    {
        
        $this->container['email_template_reminder3'] = $email_template_reminder3;

        return $this;
    }

    /**
     * Gets email_template_reminder_endless
     *
     * @return string|null
     */
    public function getEmailTemplateReminderEndless()
    {
        return $this->container['email_template_reminder_endless'];
    }

    /**
     * Sets email_template_reminder_endless
     *
     * @param string|null $email_template_reminder_endless The full template for enless reminders
     *
     * @return self
     */
    public function setEmailTemplateReminderEndless($email_template_reminder_endless)
    {
        
        $this->container['email_template_reminder_endless'] = $email_template_reminder_endless;

        return $this;
    }

    /**
     * Gets enable_portal_password
     *
     * @return bool|null
     */
    public function getEnablePortalPassword()
    {
        return $this->container['enable_portal_password'];
    }

    /**
     * Sets enable_portal_password
     *
     * @param bool|null $enable_portal_password Toggles whether a password is required to log into the client portal
     *
     * @return self
     */
    public function setEnablePortalPassword($enable_portal_password)
    {
        
        $this->container['enable_portal_password'] = $enable_portal_password;

        return $this;
    }

    /**
     * Gets show_accept_invoice_terms
     *
     * @return bool|null
     */
    public function getShowAcceptInvoiceTerms()
    {
        return $this->container['show_accept_invoice_terms'];
    }

    /**
     * Sets show_accept_invoice_terms
     *
     * @param bool|null $show_accept_invoice_terms Toggles whether the terms dialogue is shown to the client
     *
     * @return self
     */
    public function setShowAcceptInvoiceTerms($show_accept_invoice_terms)
    {
        
        $this->container['show_accept_invoice_terms'] = $show_accept_invoice_terms;

        return $this;
    }

    /**
     * Gets show_accept_quote_terms
     *
     * @return bool|null
     */
    public function getShowAcceptQuoteTerms()
    {
        return $this->container['show_accept_quote_terms'];
    }

    /**
     * Sets show_accept_quote_terms
     *
     * @param bool|null $show_accept_quote_terms Toggles whether the terms dialogue is shown to the client
     *
     * @return self
     */
    public function setShowAcceptQuoteTerms($show_accept_quote_terms)
    {
        
        $this->container['show_accept_quote_terms'] = $show_accept_quote_terms;

        return $this;
    }

    /**
     * Gets require_invoice_signature
     *
     * @return bool|null
     */
    public function getRequireInvoiceSignature()
    {
        return $this->container['require_invoice_signature'];
    }

    /**
     * Sets require_invoice_signature
     *
     * @param bool|null $require_invoice_signature Toggles whether a invoice signature is required
     *
     * @return self
     */
    public function setRequireInvoiceSignature($require_invoice_signature)
    {
        
        $this->container['require_invoice_signature'] = $require_invoice_signature;

        return $this;
    }

    /**
     * Gets require_quote_signature
     *
     * @return bool|null
     */
    public function getRequireQuoteSignature()
    {
        return $this->container['require_quote_signature'];
    }

    /**
     * Sets require_quote_signature
     *
     * @param bool|null $require_quote_signature Toggles whether a quote signature is required
     *
     * @return self
     */
    public function setRequireQuoteSignature($require_quote_signature)
    {
        
        $this->container['require_quote_signature'] = $require_quote_signature;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The company name
     *
     * @return self
     */
    public function setName($name)
    {
        
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets company_logo
     *
     * @return object|null
     */
    public function getCompanyLogo()
    {
        return $this->container['company_logo'];
    }

    /**
     * Sets company_logo
     *
     * @param object|null $company_logo The company logo file
     *
     * @return self
     */
    public function setCompanyLogo($company_logo)
    {
        
        $this->container['company_logo'] = $company_logo;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string|null
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string|null $website The company website URL
     *
     * @return self
     */
    public function setWebsite($website)
    {
        
        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets address1
     *
     * @return string|null
     */
    public function getAddress1()
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     *
     * @param string|null $address1 The company address line 1
     *
     * @return self
     */
    public function setAddress1($address1)
    {
        
        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string|null
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string|null $address2 The company address line 2
     *
     * @return self
     */
    public function setAddress2($address2)
    {
        
        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city The company city
     *
     * @return self
     */
    public function setCity($city)
    {
        
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state The company state
     *
     * @return self
     */
    public function setState($state)
    {
        
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code The company zip/postal code
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone The company phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The company email
     *
     * @return self
     */
    public function setEmail($email)
    {
        
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets country_id
     *
     * @return string|null
     */
    public function getCountryId()
    {
        return $this->container['country_id'];
    }

    /**
     * Sets country_id
     *
     * @param string|null $country_id The country ID
     *
     * @return self
     */
    public function setCountryId($country_id)
    {
        
        $this->container['country_id'] = $country_id;

        return $this;
    }

    /**
     * Gets vat_number
     *
     * @return string|null
     */
    public function getVatNumber()
    {
        return $this->container['vat_number'];
    }

    /**
     * Sets vat_number
     *
     * @param string|null $vat_number The company VAT/TAX ID number
     *
     * @return self
     */
    public function setVatNumber($vat_number)
    {
        
        $this->container['vat_number'] = $vat_number;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return string|null
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param string|null $page_size The default page size
     *
     * @return self
     */
    public function setPageSize($page_size)
    {
        
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets font_size
     *
     * @return float|null
     */
    public function getFontSize()
    {
        return $this->container['font_size'];
    }

    /**
     * Sets font_size
     *
     * @param float|null $font_size The font size
     *
     * @return self
     */
    public function setFontSize($font_size)
    {
        
        $this->container['font_size'] = $font_size;

        return $this;
    }

    /**
     * Gets primary_font
     *
     * @return string|null
     */
    public function getPrimaryFont()
    {
        return $this->container['primary_font'];
    }

    /**
     * Sets primary_font
     *
     * @param string|null $primary_font The primary font
     *
     * @return self
     */
    public function setPrimaryFont($primary_font)
    {
        
        $this->container['primary_font'] = $primary_font;

        return $this;
    }

    /**
     * Gets secondary_font
     *
     * @return string|null
     */
    public function getSecondaryFont()
    {
        return $this->container['secondary_font'];
    }

    /**
     * Sets secondary_font
     *
     * @param string|null $secondary_font The secondary font
     *
     * @return self
     */
    public function setSecondaryFont($secondary_font)
    {
        
        $this->container['secondary_font'] = $secondary_font;

        return $this;
    }

    /**
     * Gets hide_paid_to_date
     *
     * @return bool|null
     */
    public function getHidePaidToDate()
    {
        return $this->container['hide_paid_to_date'];
    }

    /**
     * Sets hide_paid_to_date
     *
     * @param bool|null $hide_paid_to_date Flags whether to hide the paid to date field
     *
     * @return self
     */
    public function setHidePaidToDate($hide_paid_to_date)
    {
        
        $this->container['hide_paid_to_date'] = $hide_paid_to_date;

        return $this;
    }

    /**
     * Gets embed_documents
     *
     * @return bool|null
     */
    public function getEmbedDocuments()
    {
        return $this->container['embed_documents'];
    }

    /**
     * Sets embed_documents
     *
     * @param bool|null $embed_documents Toggled whether to embed documents in the PDF
     *
     * @return self
     */
    public function setEmbedDocuments($embed_documents)
    {
        
        $this->container['embed_documents'] = $embed_documents;

        return $this;
    }

    /**
     * Gets all_pages_header
     *
     * @return bool|null
     */
    public function getAllPagesHeader()
    {
        return $this->container['all_pages_header'];
    }

    /**
     * Sets all_pages_header
     *
     * @param bool|null $all_pages_header The header for the PDF
     *
     * @return self
     */
    public function setAllPagesHeader($all_pages_header)
    {
        
        $this->container['all_pages_header'] = $all_pages_header;

        return $this;
    }

    /**
     * Gets all_pages_footer
     *
     * @return bool|null
     */
    public function getAllPagesFooter()
    {
        return $this->container['all_pages_footer'];
    }

    /**
     * Sets all_pages_footer
     *
     * @param bool|null $all_pages_footer The footer for the PDF
     *
     * @return self
     */
    public function setAllPagesFooter($all_pages_footer)
    {
        
        $this->container['all_pages_footer'] = $all_pages_footer;

        return $this;
    }

    /**
     * Gets document_email_attachment
     *
     * @return bool|null
     */
    public function getDocumentEmailAttachment()
    {
        return $this->container['document_email_attachment'];
    }

    /**
     * Sets document_email_attachment
     *
     * @param bool|null $document_email_attachment Toggles whether to attach documents in the email
     *
     * @return self
     */
    public function setDocumentEmailAttachment($document_email_attachment)
    {
        
        $this->container['document_email_attachment'] = $document_email_attachment;

        return $this;
    }

    /**
     * Gets enable_client_portal_password
     *
     * @return bool|null
     */
    public function getEnableClientPortalPassword()
    {
        return $this->container['enable_client_portal_password'];
    }

    /**
     * Sets enable_client_portal_password
     *
     * @param bool|null $enable_client_portal_password Toggles password protection of the client portal
     *
     * @return self
     */
    public function setEnableClientPortalPassword($enable_client_portal_password)
    {
        
        $this->container['enable_client_portal_password'] = $enable_client_portal_password;

        return $this;
    }

    /**
     * Gets enable_email_markup
     *
     * @return bool|null
     */
    public function getEnableEmailMarkup()
    {
        return $this->container['enable_email_markup'];
    }

    /**
     * Sets enable_email_markup
     *
     * @param bool|null $enable_email_markup Toggles the use of markdown in emails
     *
     * @return self
     */
    public function setEnableEmailMarkup($enable_email_markup)
    {
        
        $this->container['enable_email_markup'] = $enable_email_markup;

        return $this;
    }

    /**
     * Gets enable_client_portal_dashboard
     *
     * @return bool|null
     */
    public function getEnableClientPortalDashboard()
    {
        return $this->container['enable_client_portal_dashboard'];
    }

    /**
     * Sets enable_client_portal_dashboard
     *
     * @param bool|null $enable_client_portal_dashboard Toggles whether the client dashboard is shown in the client portal
     *
     * @return self
     */
    public function setEnableClientPortalDashboard($enable_client_portal_dashboard)
    {
        
        $this->container['enable_client_portal_dashboard'] = $enable_client_portal_dashboard;

        return $this;
    }

    /**
     * Gets enable_client_portal
     *
     * @return bool|null
     */
    public function getEnableClientPortal()
    {
        return $this->container['enable_client_portal'];
    }

    /**
     * Sets enable_client_portal
     *
     * @param bool|null $enable_client_portal Toggles whether the entire client portal is displayed to the client, or only the context
     *
     * @return self
     */
    public function setEnableClientPortal($enable_client_portal)
    {
        
        $this->container['enable_client_portal'] = $enable_client_portal;

        return $this;
    }

    /**
     * Gets email_template_statement
     *
     * @return string|null
     */
    public function getEmailTemplateStatement()
    {
        return $this->container['email_template_statement'];
    }

    /**
     * Sets email_template_statement
     *
     * @param string|null $email_template_statement The body of the email for statements
     *
     * @return self
     */
    public function setEmailTemplateStatement($email_template_statement)
    {
        
        $this->container['email_template_statement'] = $email_template_statement;

        return $this;
    }

    /**
     * Gets email_subject_statement
     *
     * @return string|null
     */
    public function getEmailSubjectStatement()
    {
        return $this->container['email_subject_statement'];
    }

    /**
     * Sets email_subject_statement
     *
     * @param string|null $email_subject_statement The subject of the email for statements
     *
     * @return self
     */
    public function setEmailSubjectStatement($email_subject_statement)
    {
        
        $this->container['email_subject_statement'] = $email_subject_statement;

        return $this;
    }

    /**
     * Gets signature_on_pdf
     *
     * @return bool|null
     */
    public function getSignatureOnPdf()
    {
        return $this->container['signature_on_pdf'];
    }

    /**
     * Sets signature_on_pdf
     *
     * @param bool|null $signature_on_pdf Toggles whether the signature (if available) is displayed on the PDF
     *
     * @return self
     */
    public function setSignatureOnPdf($signature_on_pdf)
    {
        
        $this->container['signature_on_pdf'] = $signature_on_pdf;

        return $this;
    }

    /**
     * Gets quote_footer
     *
     * @return string|null
     */
    public function getQuoteFooter()
    {
        return $this->container['quote_footer'];
    }

    /**
     * Sets quote_footer
     *
     * @param string|null $quote_footer The default quote footer
     *
     * @return self
     */
    public function setQuoteFooter($quote_footer)
    {
        
        $this->container['quote_footer'] = $quote_footer;

        return $this;
    }

    /**
     * Gets email_subject_custom1
     *
     * @return string|null
     */
    public function getEmailSubjectCustom1()
    {
        return $this->container['email_subject_custom1'];
    }

    /**
     * Sets email_subject_custom1
     *
     * @param string|null $email_subject_custom1 Custom reminder template subject
     *
     * @return self
     */
    public function setEmailSubjectCustom1($email_subject_custom1)
    {
        
        $this->container['email_subject_custom1'] = $email_subject_custom1;

        return $this;
    }

    /**
     * Gets email_subject_custom2
     *
     * @return string|null
     */
    public function getEmailSubjectCustom2()
    {
        return $this->container['email_subject_custom2'];
    }

    /**
     * Sets email_subject_custom2
     *
     * @param string|null $email_subject_custom2 Custom reminder template subject
     *
     * @return self
     */
    public function setEmailSubjectCustom2($email_subject_custom2)
    {
        
        $this->container['email_subject_custom2'] = $email_subject_custom2;

        return $this;
    }

    /**
     * Gets email_subject_custom3
     *
     * @return string|null
     */
    public function getEmailSubjectCustom3()
    {
        return $this->container['email_subject_custom3'];
    }

    /**
     * Sets email_subject_custom3
     *
     * @param string|null $email_subject_custom3 Custom reminder template subject
     *
     * @return self
     */
    public function setEmailSubjectCustom3($email_subject_custom3)
    {
        
        $this->container['email_subject_custom3'] = $email_subject_custom3;

        return $this;
    }

    /**
     * Gets email_template_custom1
     *
     * @return string|null
     */
    public function getEmailTemplateCustom1()
    {
        return $this->container['email_template_custom1'];
    }

    /**
     * Sets email_template_custom1
     *
     * @param string|null $email_template_custom1 Custom reminder template body
     *
     * @return self
     */
    public function setEmailTemplateCustom1($email_template_custom1)
    {
        
        $this->container['email_template_custom1'] = $email_template_custom1;

        return $this;
    }

    /**
     * Gets email_template_custom2
     *
     * @return string|null
     */
    public function getEmailTemplateCustom2()
    {
        return $this->container['email_template_custom2'];
    }

    /**
     * Sets email_template_custom2
     *
     * @param string|null $email_template_custom2 Custom reminder template body
     *
     * @return self
     */
    public function setEmailTemplateCustom2($email_template_custom2)
    {
        
        $this->container['email_template_custom2'] = $email_template_custom2;

        return $this;
    }

    /**
     * Gets email_template_custom3
     *
     * @return string|null
     */
    public function getEmailTemplateCustom3()
    {
        return $this->container['email_template_custom3'];
    }

    /**
     * Sets email_template_custom3
     *
     * @param string|null $email_template_custom3 Custom reminder template body
     *
     * @return self
     */
    public function setEmailTemplateCustom3($email_template_custom3)
    {
        
        $this->container['email_template_custom3'] = $email_template_custom3;

        return $this;
    }

    /**
     * Gets enable_reminder1
     *
     * @return bool|null
     */
    public function getEnableReminder1()
    {
        return $this->container['enable_reminder1'];
    }

    /**
     * Sets enable_reminder1
     *
     * @param bool|null $enable_reminder1 Toggles whether this reminder is enabled
     *
     * @return self
     */
    public function setEnableReminder1($enable_reminder1)
    {
        
        $this->container['enable_reminder1'] = $enable_reminder1;

        return $this;
    }

    /**
     * Gets enable_reminder2
     *
     * @return bool|null
     */
    public function getEnableReminder2()
    {
        return $this->container['enable_reminder2'];
    }

    /**
     * Sets enable_reminder2
     *
     * @param bool|null $enable_reminder2 Toggles whether this reminder is enabled
     *
     * @return self
     */
    public function setEnableReminder2($enable_reminder2)
    {
        
        $this->container['enable_reminder2'] = $enable_reminder2;

        return $this;
    }

    /**
     * Gets enable_reminder3
     *
     * @return bool|null
     */
    public function getEnableReminder3()
    {
        return $this->container['enable_reminder3'];
    }

    /**
     * Sets enable_reminder3
     *
     * @param bool|null $enable_reminder3 Toggles whether this reminder is enabled
     *
     * @return self
     */
    public function setEnableReminder3($enable_reminder3)
    {
        
        $this->container['enable_reminder3'] = $enable_reminder3;

        return $this;
    }

    /**
     * Gets num_days_reminder1
     *
     * @return float|null
     */
    public function getNumDaysReminder1()
    {
        return $this->container['num_days_reminder1'];
    }

    /**
     * Sets num_days_reminder1
     *
     * @param float|null $num_days_reminder1 The Reminder interval
     *
     * @return self
     */
    public function setNumDaysReminder1($num_days_reminder1)
    {
        
        $this->container['num_days_reminder1'] = $num_days_reminder1;

        return $this;
    }

    /**
     * Gets num_days_reminder2
     *
     * @return float|null
     */
    public function getNumDaysReminder2()
    {
        return $this->container['num_days_reminder2'];
    }

    /**
     * Sets num_days_reminder2
     *
     * @param float|null $num_days_reminder2 The Reminder interval
     *
     * @return self
     */
    public function setNumDaysReminder2($num_days_reminder2)
    {
        
        $this->container['num_days_reminder2'] = $num_days_reminder2;

        return $this;
    }

    /**
     * Gets num_days_reminder3
     *
     * @return float|null
     */
    public function getNumDaysReminder3()
    {
        return $this->container['num_days_reminder3'];
    }

    /**
     * Sets num_days_reminder3
     *
     * @param float|null $num_days_reminder3 The Reminder interval
     *
     * @return self
     */
    public function setNumDaysReminder3($num_days_reminder3)
    {
        
        $this->container['num_days_reminder3'] = $num_days_reminder3;

        return $this;
    }

    /**
     * Gets schedule_reminder1
     *
     * @return string|null
     */
    public function getScheduleReminder1()
    {
        return $this->container['schedule_reminder1'];
    }

    /**
     * Sets schedule_reminder1
     *
     * @param string|null $schedule_reminder1 (enum: after_invoice_date, before_due_date, after_due_date)
     *
     * @return self
     */
    public function setScheduleReminder1($schedule_reminder1)
    {
        
        $this->container['schedule_reminder1'] = $schedule_reminder1;

        return $this;
    }

    /**
     * Gets schedule_reminder2
     *
     * @return string|null
     */
    public function getScheduleReminder2()
    {
        return $this->container['schedule_reminder2'];
    }

    /**
     * Sets schedule_reminder2
     *
     * @param string|null $schedule_reminder2 (enum: after_invoice_date, before_due_date, after_due_date)
     *
     * @return self
     */
    public function setScheduleReminder2($schedule_reminder2)
    {
        
        $this->container['schedule_reminder2'] = $schedule_reminder2;

        return $this;
    }

    /**
     * Gets schedule_reminder3
     *
     * @return string|null
     */
    public function getScheduleReminder3()
    {
        return $this->container['schedule_reminder3'];
    }

    /**
     * Sets schedule_reminder3
     *
     * @param string|null $schedule_reminder3 (enum: after_invoice_date, before_due_date, after_due_date)
     *
     * @return self
     */
    public function setScheduleReminder3($schedule_reminder3)
    {
        
        $this->container['schedule_reminder3'] = $schedule_reminder3;

        return $this;
    }

    /**
     * Gets late_fee_amount1
     *
     * @return float|null
     */
    public function getLateFeeAmount1()
    {
        return $this->container['late_fee_amount1'];
    }

    /**
     * Sets late_fee_amount1
     *
     * @param float|null $late_fee_amount1 The late fee amount for reminder 1
     *
     * @return self
     */
    public function setLateFeeAmount1($late_fee_amount1)
    {
        
        $this->container['late_fee_amount1'] = $late_fee_amount1;

        return $this;
    }

    /**
     * Gets late_fee_amount2
     *
     * @return float|null
     */
    public function getLateFeeAmount2()
    {
        return $this->container['late_fee_amount2'];
    }

    /**
     * Sets late_fee_amount2
     *
     * @param float|null $late_fee_amount2 The late fee amount for reminder 2
     *
     * @return self
     */
    public function setLateFeeAmount2($late_fee_amount2)
    {
        
        $this->container['late_fee_amount2'] = $late_fee_amount2;

        return $this;
    }

    /**
     * Gets late_fee_amount3
     *
     * @return float|null
     */
    public function getLateFeeAmount3()
    {
        return $this->container['late_fee_amount3'];
    }

    /**
     * Sets late_fee_amount3
     *
     * @param float|null $late_fee_amount3 The late fee amount for reminder 2
     *
     * @return self
     */
    public function setLateFeeAmount3($late_fee_amount3)
    {
        
        $this->container['late_fee_amount3'] = $late_fee_amount3;

        return $this;
    }

    /**
     * Gets endless_reminder_frequency_id
     *
     * @return string|null
     */
    public function getEndlessReminderFrequencyId()
    {
        return $this->container['endless_reminder_frequency_id'];
    }

    /**
     * Sets endless_reminder_frequency_id
     *
     * @param string|null $endless_reminder_frequency_id The frequency id of the endless reminder
     *
     * @return self
     */
    public function setEndlessReminderFrequencyId($endless_reminder_frequency_id)
    {
        
        $this->container['endless_reminder_frequency_id'] = $endless_reminder_frequency_id;

        return $this;
    }

    /**
     * Gets client_online_payment_notification
     *
     * @return bool|null
     */
    public function getClientOnlinePaymentNotification()
    {
        return $this->container['client_online_payment_notification'];
    }

    /**
     * Sets client_online_payment_notification
     *
     * @param bool|null $client_online_payment_notification Determines if a client should receive the notification for a online payment
     *
     * @return self
     */
    public function setClientOnlinePaymentNotification($client_online_payment_notification)
    {
        
        $this->container['client_online_payment_notification'] = $client_online_payment_notification;

        return $this;
    }

    /**
     * Gets client_manual_payment_notification
     *
     * @return bool|null
     */
    public function getClientManualPaymentNotification()
    {
        return $this->container['client_manual_payment_notification'];
    }

    /**
     * Sets client_manual_payment_notification
     *
     * @param bool|null $client_manual_payment_notification Determines if a client should receive the notification for a manually entered payment
     *
     * @return self
     */
    public function setClientManualPaymentNotification($client_manual_payment_notification)
    {
        
        $this->container['client_manual_payment_notification'] = $client_manual_payment_notification;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


